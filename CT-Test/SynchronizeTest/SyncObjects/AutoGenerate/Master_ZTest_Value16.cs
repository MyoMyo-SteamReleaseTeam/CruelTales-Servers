/*
 * Generated File : Master_ZTest_Value16
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using CT.Common.Gameplay;
using CT.Common.DataType;
using CT.Common.DataType.Synchronizations;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTS.Instance.Gameplay;
using CTS.Instance.Synchronizations;
using CTS.Instance.SyncObjects;

namespace CTS.Instance.SyncObjects
{
	[Serializable]
	public partial class ZTest_Value16
	{
		[SyncVar]
		private int _v0;
		[SyncVar]
		private int _v1;
		[SyncVar]
		private int _v2;
		[SyncVar]
		private NetString _v4 = new();
		[SyncVar]
		private NetStringShort _v5 = new();
		[SyncObject]
		private SyncList<UserId> _v6 = new();
		[SyncObject]
		private ZTest_InnerObject _v7 = new();
		[SyncVar]
		private ushort _v8;
		[SyncVar]
		private byte _v10;
		[SyncVar]
		private int _v12;
		[SyncObject]
		private ZTest_InnerObject _v13 = new();
		[SyncObject]
		private SyncList<UserId> _v15 = new();
		[SyncVar(SyncType.Unreliable)]
		private int _uv0;
		[SyncVar(SyncType.Unreliable)]
		private ulong _uv2;
		[SyncVar(SyncType.Unreliable)]
		private int _uv4;
		[SyncVar(SyncType.Unreliable)]
		private int _uv5;
		[SyncVar(SyncType.Unreliable)]
		private int _uv6;
		[SyncVar(SyncType.Unreliable)]
		private int _uv7;
		[SyncVar(SyncType.Unreliable)]
		private ushort _uv8;
		[SyncVar(SyncType.Unreliable)]
		private float _uv10;
		[SyncVar(SyncType.Unreliable)]
		private int _uv12;
		[SyncVar(SyncType.Unreliable)]
		private int _uv13;
		[SyncVar(SyncType.Unreliable)]
		private int _uv15;
		[SyncRpc]
		public partial void f3(int a);
		[SyncRpc]
		private partial void f9();
		[SyncRpc]
		private partial void f14(int a, sbyte b);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf1(NetworkPlayer player, int a, sbyte b);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf3(NetworkPlayer player, int a, float b, TestEnumType c);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf9(NetworkPlayer player);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf14(NetworkPlayer player, int a);
		private BitmaskByte _dirtyReliable_0 = new();
		private BitmaskByte _dirtyReliable_1 = new();
		private BitmaskByte _dirtyUnreliable_0 = new();
		private BitmaskByte _dirtyUnreliable_1 = new();
		public override bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _v6.IsDirtyReliable;
				isDirty |= _v7.IsDirtyReliable;
				isDirty |= _dirtyReliable_0.AnyTrue();
				isDirty |= _v13.IsDirtyReliable;
				isDirty |= _v15.IsDirtyReliable;
				isDirty |= _dirtyReliable_1.AnyTrue();
				return isDirty;
			}
		}
		public override bool IsDirtyUnreliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _dirtyUnreliable_0.AnyTrue();
				isDirty |= _dirtyUnreliable_1.AnyTrue();
				return isDirty;
			}
		}
		public int V0
		{
			get => _v0;
			set
			{
				if (_v0 == value) return;
				_v0 = value;
				_dirtyReliable_0[0] = true;
			}
		}
		public int V1
		{
			get => _v1;
			set
			{
				if (_v1 == value) return;
				_v1 = value;
				_dirtyReliable_0[1] = true;
			}
		}
		public int V2
		{
			get => _v2;
			set
			{
				if (_v2 == value) return;
				_v2 = value;
				_dirtyReliable_0[2] = true;
			}
		}
		public NetString V4
		{
			get => _v4;
			set
			{
				if (_v4 == value) return;
				_v4 = value;
				_dirtyReliable_0[3] = true;
			}
		}
		public NetStringShort V5
		{
			get => _v5;
			set
			{
				if (_v5 == value) return;
				_v5 = value;
				_dirtyReliable_0[4] = true;
			}
		}
		public ushort V8
		{
			get => _v8;
			set
			{
				if (_v8 == value) return;
				_v8 = value;
				_dirtyReliable_0[7] = true;
			}
		}
		private byte V10
		{
			get => _v10;
			set
			{
				if (_v10 == value) return;
				_v10 = value;
				_dirtyReliable_1[0] = true;
			}
		}
		private int V12
		{
			get => _v12;
			set
			{
				if (_v12 == value) return;
				_v12 = value;
				_dirtyReliable_1[1] = true;
			}
		}
		public partial void f3(int a)
		{
			f3Callstack.Add(a);
			_dirtyReliable_1[4] = true;
		}
		private List<int> f3Callstack = new(4);
		private partial void f9()
		{
			f9CallstackCount++;
			_dirtyReliable_1[5] = true;
		}
		private byte f9CallstackCount = 0;
		private partial void f14(int a, sbyte b)
		{
			f14Callstack.Add((a, b));
			_dirtyReliable_1[6] = true;
		}
		private List<(int a, sbyte b)> f14Callstack = new(4);
		public int Uv0
		{
			get => _uv0;
			set
			{
				if (_uv0 == value) return;
				_uv0 = value;
				_dirtyUnreliable_0[0] = true;
			}
		}
		public ulong Uv2
		{
			get => _uv2;
			set
			{
				if (_uv2 == value) return;
				_uv2 = value;
				_dirtyUnreliable_0[1] = true;
			}
		}
		public int Uv4
		{
			get => _uv4;
			set
			{
				if (_uv4 == value) return;
				_uv4 = value;
				_dirtyUnreliable_0[2] = true;
			}
		}
		public int Uv5
		{
			get => _uv5;
			set
			{
				if (_uv5 == value) return;
				_uv5 = value;
				_dirtyUnreliable_0[3] = true;
			}
		}
		public int Uv6
		{
			get => _uv6;
			set
			{
				if (_uv6 == value) return;
				_uv6 = value;
				_dirtyUnreliable_0[4] = true;
			}
		}
		private int Uv7
		{
			get => _uv7;
			set
			{
				if (_uv7 == value) return;
				_uv7 = value;
				_dirtyUnreliable_0[5] = true;
			}
		}
		private ushort Uv8
		{
			get => _uv8;
			set
			{
				if (_uv8 == value) return;
				_uv8 = value;
				_dirtyUnreliable_0[6] = true;
			}
		}
		public float Uv10
		{
			get => _uv10;
			set
			{
				if (_uv10 == value) return;
				_uv10 = value;
				_dirtyUnreliable_0[7] = true;
			}
		}
		public int Uv12
		{
			get => _uv12;
			set
			{
				if (_uv12 == value) return;
				_uv12 = value;
				_dirtyUnreliable_1[0] = true;
			}
		}
		private int Uv13
		{
			get => _uv13;
			set
			{
				if (_uv13 == value) return;
				_uv13 = value;
				_dirtyUnreliable_1[1] = true;
			}
		}
		public int Uv15
		{
			get => _uv15;
			set
			{
				if (_uv15 == value) return;
				_uv15 = value;
				_dirtyUnreliable_1[2] = true;
			}
		}
		public partial void uf1(NetworkPlayer player, int a, sbyte b)
		{
			uf1Callstack.Add(player, (a, b));
			_dirtyUnreliable_1[3] = true;
		}
		private TargetCallstack<NetworkPlayer, (int a, sbyte b)> uf1Callstack = new(8);
		public partial void uf3(NetworkPlayer player, int a, float b, TestEnumType c)
		{
			uf3Callstack.Add(player, (a, b, c));
			_dirtyUnreliable_1[4] = true;
		}
		private TargetCallstack<NetworkPlayer, (int a, float b, TestEnumType c)> uf3Callstack = new(8);
		public partial void uf9(NetworkPlayer player)
		{
			uf9Callstack.Add(player);
			_dirtyUnreliable_1[5] = true;
		}
		private TargetVoidCallstack<NetworkPlayer> uf9Callstack = new(8);
		public partial void uf14(NetworkPlayer player, int a)
		{
			uf14Callstack.Add(player, a);
			_dirtyUnreliable_1[6] = true;
		}
		private TargetCallstack<NetworkPlayer, int> uf14Callstack = new(8);
		public override void ClearDirtyReliable()
		{
			_dirtyReliable_0.Clear();
			_v6.ClearDirtyReliable();
			_v7.ClearDirtyReliable();
			_dirtyReliable_1.Clear();
			_v13.ClearDirtyReliable();
			_v15.ClearDirtyReliable();
			f3Callstack.Clear();
			f9CallstackCount = 0;
			f14Callstack.Clear();
		}
		public override void ClearDirtyUnreliable()
		{
			_dirtyUnreliable_0.Clear();
			_dirtyUnreliable_1.Clear();
			uf1Callstack.Clear();
			uf3Callstack.Clear();
			uf9Callstack.Clear();
			uf14Callstack.Clear();
		}
		public override void SerializeSyncReliable(NetworkPlayer player, IPacketWriter writer)
		{
			int originSize = writer.Size;
			_dirtyReliable_0[5] = _v6.IsDirtyReliable;
			_dirtyReliable_0[6] = _v7.IsDirtyReliable;
			BitmaskByte dirtyReliable_0 = _dirtyReliable_0;
			int dirtyReliable_0_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyReliable_0.AnyTrue())
			{
				if (_dirtyReliable_0[0])
				{
					writer.Put(_v0);
				}
				if (_dirtyReliable_0[1])
				{
					writer.Put(_v1);
				}
				if (_dirtyReliable_0[2])
				{
					writer.Put(_v2);
				}
				if (_dirtyReliable_0[3])
				{
					_v4.Serialize(writer);
				}
				if (_dirtyReliable_0[4])
				{
					_v5.Serialize(writer);
				}
				if (_dirtyReliable_0[5])
				{
					_v6.SerializeSyncReliable(writer);
				}
				if (_dirtyReliable_0[6])
				{
					int curSize = writer.Size;
					_v7.SerializeSyncReliable(player, writer);
					if (writer.Size == curSize)
					{
						dirtyReliable_0[6] = false;
					}
				}
				if (_dirtyReliable_0[7])
				{
					writer.Put(_v8);
				}
			}
			writer.PutTo(dirtyReliable_0, dirtyReliable_0_pos);
			_dirtyReliable_1[2] = _v13.IsDirtyReliable;
			_dirtyReliable_1[3] = _v15.IsDirtyReliable;
			BitmaskByte dirtyReliable_1 = _dirtyReliable_1;
			int dirtyReliable_1_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyReliable_1.AnyTrue())
			{
				if (_dirtyReliable_1[0])
				{
					writer.Put(_v10);
				}
				if (_dirtyReliable_1[1])
				{
					writer.Put(_v12);
				}
				if (_dirtyReliable_1[2])
				{
					int curSize = writer.Size;
					_v13.SerializeSyncReliable(player, writer);
					if (writer.Size == curSize)
					{
						dirtyReliable_1[2] = false;
					}
				}
				if (_dirtyReliable_1[3])
				{
					_v15.SerializeSyncReliable(writer);
				}
				if (_dirtyReliable_1[4])
				{
					byte count = (byte)f3Callstack.Count;
					writer.Put(count);
					for (int i = 0; i < count; i++)
					{
						var arg = f3Callstack[i];
						writer.Put(arg);
					}
				}
				if (_dirtyReliable_1[5])
				{
					writer.Put((byte)f9CallstackCount);
				}
				if (_dirtyReliable_1[6])
				{
					byte count = (byte)f14Callstack.Count;
					writer.Put(count);
					for (int i = 0; i < count; i++)
					{
						var arg = f14Callstack[i];
						writer.Put(arg.a);
						writer.Put(arg.b);
					}
				}
			}
			writer.PutTo(dirtyReliable_1, dirtyReliable_1_pos);
			if (writer.Size == originSize + 2)
			{
				writer.SetSize(originSize);
			}
		}
		public override void SerializeSyncUnreliable(NetworkPlayer player, IPacketWriter writer)
		{
			int originSize = writer.Size;
			_dirtyUnreliable_0.Serialize(writer);
			if (_dirtyUnreliable_0.AnyTrue())
			{
				if (_dirtyUnreliable_0[0])
				{
					writer.Put(_uv0);
				}
				if (_dirtyUnreliable_0[1])
				{
					writer.Put(_uv2);
				}
				if (_dirtyUnreliable_0[2])
				{
					writer.Put(_uv4);
				}
				if (_dirtyUnreliable_0[3])
				{
					writer.Put(_uv5);
				}
				if (_dirtyUnreliable_0[4])
				{
					writer.Put(_uv6);
				}
				if (_dirtyUnreliable_0[5])
				{
					writer.Put(_uv7);
				}
				if (_dirtyUnreliable_0[6])
				{
					writer.Put(_uv8);
				}
				if (_dirtyUnreliable_0[7])
				{
					writer.Put(_uv10);
				}
			}
			BitmaskByte dirtyUnreliable_1 = _dirtyUnreliable_1;
			int dirtyUnreliable_1_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyUnreliable_1.AnyTrue())
			{
				if (_dirtyUnreliable_1[0])
				{
					writer.Put(_uv12);
				}
				if (_dirtyUnreliable_1[1])
				{
					writer.Put(_uv13);
				}
				if (_dirtyUnreliable_1[2])
				{
					writer.Put(_uv15);
				}
				if (_dirtyUnreliable_1[3])
				{
					int uf1Count = uf1Callstack.GetCallCount(player);
					if (uf1Count > 0)
					{
						var uf1callList = uf1Callstack.GetCallList(player);
						writer.Put((byte)uf1Count);
						for (int i = 0; i < uf1Count; i++)
						{
							var arg = uf1callList[i];
							writer.Put(arg.a);
							writer.Put(arg.b);
						}
					}
					else
					{
						dirtyUnreliable_1[3] = false;
					}
				}
				if (_dirtyUnreliable_1[4])
				{
					int uf3Count = uf3Callstack.GetCallCount(player);
					if (uf3Count > 0)
					{
						var uf3callList = uf3Callstack.GetCallList(player);
						writer.Put((byte)uf3Count);
						for (int i = 0; i < uf3Count; i++)
						{
							var arg = uf3callList[i];
							writer.Put(arg.a);
							writer.Put(arg.b);
							writer.Put((int)arg.c);
						}
					}
					else
					{
						dirtyUnreliable_1[4] = false;
					}
				}
				if (_dirtyUnreliable_1[5])
				{
					int uf9Count = uf9Callstack.GetCallCount(player);
					if (uf9Count > 0)
					{
						writer.Put((byte)uf9Count);
					}
					else
					{
						dirtyUnreliable_1[5] = false;
					}
				}
				if (_dirtyUnreliable_1[6])
				{
					int uf14Count = uf14Callstack.GetCallCount(player);
					if (uf14Count > 0)
					{
						var uf14callList = uf14Callstack.GetCallList(player);
						writer.Put((byte)uf14Count);
						for (int i = 0; i < uf14Count; i++)
						{
							var arg = uf14callList[i];
							writer.Put(arg);
						}
					}
					else
					{
						dirtyUnreliable_1[6] = false;
					}
				}
			}
			writer.PutTo(dirtyUnreliable_1, dirtyUnreliable_1_pos);
			if (writer.Size == originSize + 2)
			{
				writer.SetSize(originSize);
			}
		}
		public override void SerializeEveryProperty(IPacketWriter writer)
		{
			writer.Put(_v0);
			writer.Put(_v1);
			writer.Put(_v2);
			_v4.Serialize(writer);
			_v5.Serialize(writer);
			_v6.SerializeEveryProperty(writer);
			_v7.SerializeEveryProperty(writer);
			writer.Put(_v8);
			writer.Put(_v10);
			writer.Put(_v12);
			_v13.SerializeEveryProperty(writer);
			_v15.SerializeEveryProperty(writer);
			writer.Put(_uv0);
			writer.Put(_uv2);
			writer.Put(_uv4);
			writer.Put(_uv5);
			writer.Put(_uv6);
			writer.Put(_uv7);
			writer.Put(_uv8);
			writer.Put(_uv10);
			writer.Put(_uv12);
			writer.Put(_uv13);
			writer.Put(_uv15);
		}
		public override void InitializeMasterProperties()
		{
			_v0 = 0;
			_v1 = 0;
			_v2 = 0;
			_v4 = new();
			_v5 = new();
			_v6.InitializeMasterProperties();
			_v7.InitializeMasterProperties();
			_v8 = 0;
			_v10 = 0;
			_v12 = 0;
			_v13.InitializeMasterProperties();
			_v15.InitializeMasterProperties();
			_uv0 = 0;
			_uv2 = 0;
			_uv4 = 0;
			_uv5 = 0;
			_uv6 = 0;
			_uv7 = 0;
			_uv8 = 0;
			_uv10 = 0;
			_uv12 = 0;
			_uv13 = 0;
			_uv15 = 0;
		}
		public override bool TryDeserializeSyncReliable(NetworkPlayer player, IPacketReader reader) => true;
		public override bool TryDeserializeSyncUnreliable(NetworkPlayer player, IPacketReader reader) => true;
		public override void InitializeRemoteProperties() { }
		public override void IgnoreSyncReliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticReliable(IPacketReader reader) { }
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
