/*
 * Generated File : Remote_ZTest_Value8
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.DataType.Synchronizations;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
#if UNITY_2021
using UnityEngine;
#endif

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class ZTest_Value8
	{
		[SyncVar]
		private NetString _v0 = new();
		public NetString V0 => _v0;
		public event Action<NetString>? OnV0Changed;
		[SyncVar]
		private NetStringShort _v1 = new();
		public NetStringShort V1 => _v1;
		public event Action<NetStringShort>? OnV1Changed;
		[SyncVar]
		private byte _v2;
		public byte V2 => _v2;
		public event Action<byte>? OnV2Changed;
		[SyncVar]
		private TestEnumType _v4;
		public TestEnumType V4 => _v4;
		public event Action<TestEnumType>? OnV4Changed;
		[SyncVar]
		private ushort _v5;
		public event Action<ushort>? OnV5Changed;
		[SyncObject]
		private SyncList<UserId> _v6 = new();
		public event Action<SyncList<UserId>>? OnV6Changed;
		[SyncObject]
		private ZTest_InnerObject _v7 = new();
		public event Action<ZTest_InnerObject>? OnV7Changed;
		[SyncVar(SyncType.Unreliable)]
		private uint _uv0;
		public uint Uv0 => _uv0;
		public event Action<uint>? OnUv0Changed;
		[SyncVar(SyncType.Unreliable)]
		private ulong _uv2;
		public ulong Uv2 => _uv2;
		public event Action<ulong>? OnUv2Changed;
		[SyncVar(SyncType.Unreliable)]
		private float _uv4;
		public float Uv4 => _uv4;
		public event Action<float>? OnUv4Changed;
		[SyncObject]
		private SyncList<UserId> _uv6 = new();
		public event Action<SyncList<UserId>>? OnUv6Changed;
		[SyncObject]
		private ZTest_InnerObject _uv7 = new();
		public event Action<ZTest_InnerObject>? OnUv7Changed;
		[SyncRpc]
		public partial void f3(int a);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf1(int a, byte b);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf3(int a, double b);
		[SyncRpc(SyncType.UnreliableTarget)]
		private partial void uf5();
		public override bool IsDirtyReliable => false;
		public override bool IsDirtyUnreliable => false;
		public override void ClearDirtyReliable() { }
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer) { }
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void SerializeEveryProperty(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					if (!_v0.TryDeserialize(reader)) return false;
					OnV0Changed?.Invoke(_v0);
				}
				if (dirtyReliable_0[1])
				{
					if (!_v1.TryDeserialize(reader)) return false;
					OnV1Changed?.Invoke(_v1);
				}
				if (dirtyReliable_0[2])
				{
					if (!reader.TryReadByte(out _v2)) return false;
					OnV2Changed?.Invoke(_v2);
				}
				if (dirtyReliable_0[3])
				{
					if (!reader.TryReadInt32(out var _v4Value)) return false;
					_v4 = (TestEnumType)_v4Value;
					OnV4Changed?.Invoke(_v4);
				}
				if (dirtyReliable_0[4])
				{
					if (!reader.TryReadUInt16(out _v5)) return false;
					OnV5Changed?.Invoke(_v5);
				}
				if (dirtyReliable_0[5])
				{
					if (!_v6.TryDeserializeSyncReliable(reader)) return false;
					OnV6Changed?.Invoke(_v6);
				}
				if (dirtyReliable_0[6])
				{
					if (!_v7.TryDeserializeSyncReliable(reader)) return false;
					OnV7Changed?.Invoke(_v7);
				}
				if (dirtyReliable_0[7])
				{
					if (!_uv6.TryDeserializeSyncReliable(reader)) return false;
					OnUv6Changed?.Invoke(_uv6);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					if (!_uv7.TryDeserializeSyncReliable(reader)) return false;
					OnUv7Changed?.Invoke(_uv7);
				}
				if (dirtyReliable_1[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						f3(a);
					}
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0[0])
			{
				if (!reader.TryReadUInt32(out _uv0)) return false;
				OnUv0Changed?.Invoke(_uv0);
			}
			if (dirtyUnreliable_0[1])
			{
				if (!reader.TryReadUInt64(out _uv2)) return false;
				OnUv2Changed?.Invoke(_uv2);
			}
			if (dirtyUnreliable_0[2])
			{
				if (!reader.TryReadSingle(out _uv4)) return false;
				OnUv4Changed?.Invoke(_uv4);
			}
			if (dirtyUnreliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadInt32(out int a)) return false;
					if (!reader.TryReadByte(out byte b)) return false;
					uf1(a, b);
				}
			}
			if (dirtyUnreliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadInt32(out int a)) return false;
					if (!reader.TryReadDouble(out double b)) return false;
					uf3(a, b);
				}
			}
			if (dirtyUnreliable_0[5])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					uf5();
				}
			}
			return true;
		}
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!_v0.TryDeserialize(reader)) return false;
			OnV0Changed?.Invoke(_v0);
			if (!_v1.TryDeserialize(reader)) return false;
			OnV1Changed?.Invoke(_v1);
			if (!reader.TryReadByte(out _v2)) return false;
			OnV2Changed?.Invoke(_v2);
			if (!reader.TryReadInt32(out var _v4Value)) return false;
			_v4 = (TestEnumType)_v4Value;
			OnV4Changed?.Invoke(_v4);
			if (!reader.TryReadUInt16(out _v5)) return false;
			OnV5Changed?.Invoke(_v5);
			if (!_v6.TryDeserializeEveryProperty(reader)) return false;
			OnV6Changed?.Invoke(_v6);
			if (!_v7.TryDeserializeEveryProperty(reader)) return false;
			OnV7Changed?.Invoke(_v7);
			if (!reader.TryReadUInt32(out _uv0)) return false;
			OnUv0Changed?.Invoke(_uv0);
			if (!reader.TryReadUInt64(out _uv2)) return false;
			OnUv2Changed?.Invoke(_uv2);
			if (!reader.TryReadSingle(out _uv4)) return false;
			OnUv4Changed?.Invoke(_uv4);
			if (!_uv6.TryDeserializeEveryProperty(reader)) return false;
			OnUv6Changed?.Invoke(_uv6);
			if (!_uv7.TryDeserializeEveryProperty(reader)) return false;
			OnUv7Changed?.Invoke(_uv7);
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_v0 = new();
			_v1 = new();
			_v2 = 0;
			_v4 = (TestEnumType)0;
			_v5 = 0;
			_v6.InitializeRemoteProperties();
			_v7.InitializeRemoteProperties();
			_uv0 = 0;
			_uv2 = 0;
			_uv4 = 0;
			_uv6.InitializeRemoteProperties();
			_uv7.InitializeRemoteProperties();
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					NetString.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[1])
				{
					NetStringShort.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[4])
				{
					reader.Ignore(2);
				}
				if (dirtyReliable_0[5])
				{
					_v6.IgnoreSyncReliable(reader);
				}
				if (dirtyReliable_0[6])
				{
					_v7.IgnoreSyncReliable(reader);
				}
				if (dirtyReliable_0[7])
				{
					_uv6.IgnoreSyncReliable(reader);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					_uv7.IgnoreSyncReliable(reader);
				}
				if (dirtyReliable_1[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					NetString.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[1])
				{
					NetStringShort.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[4])
				{
					reader.Ignore(2);
				}
				if (dirtyReliable_0[5])
				{
					SyncList<UserId>.IgnoreSyncStaticReliable(reader);
				}
				if (dirtyReliable_0[6])
				{
					ZTest_InnerObject.IgnoreSyncStaticReliable(reader);
				}
				if (dirtyReliable_0[7])
				{
					SyncList<UserId>.IgnoreSyncStaticReliable(reader);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					ZTest_InnerObject.IgnoreSyncStaticReliable(reader);
				}
				if (dirtyReliable_1[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyUnreliable_0[1])
			{
				reader.Ignore(8);
			}
			if (dirtyUnreliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyUnreliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(1);
				}
			}
			if (dirtyUnreliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(8);
				}
			}
			if (dirtyUnreliable_0[5])
			{
				reader.Ignore(1);
			}
		}
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyUnreliable_0[1])
			{
				reader.Ignore(8);
			}
			if (dirtyUnreliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyUnreliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(1);
				}
			}
			if (dirtyUnreliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(8);
				}
			}
			if (dirtyUnreliable_0[5])
			{
				reader.Ignore(1);
			}
		}
	}
}
#pragma warning restore CS0649
