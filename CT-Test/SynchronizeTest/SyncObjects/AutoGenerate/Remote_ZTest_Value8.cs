/*
 * Generated File : Remote_ZTest_Value8
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
#if UNITY_2021
using UnityEngine;
#endif

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class ZTest_Value8
	{
		[SyncVar]
		public NetString V0 = new();
		public event Action<NetString>? OnV0Changed;
		[SyncVar]
		public NetStringShort V1 = new();
		public event Action<NetStringShort>? OnV1Changed;
		[SyncVar]
		public byte V2;
		public event Action<byte>? OnV2Changed;
		[SyncVar]
		public TestEnumType V4;
		public event Action<TestEnumType>? OnV4Changed;
		[SyncVar]
		private ushort _v5;
		public event Action<ushort>? OnV5Changed;
		[SyncVar]
		private short _v6;
		public event Action<short>? OnV6Changed;
		[SyncVar]
		private int _v7;
		public event Action<int>? OnV7Changed;
		[SyncVar(SyncType.Unreliable)]
		public uint Uv0;
		public event Action<uint>? OnUv0Changed;
		[SyncVar(SyncType.Unreliable)]
		public ulong Uv2;
		public event Action<ulong>? OnUv2Changed;
		[SyncVar(SyncType.Unreliable)]
		public float Uv4;
		public event Action<float>? OnUv4Changed;
		[SyncVar(SyncType.Unreliable)]
		public UserId Uv6 = new();
		public event Action<UserId>? OnUv6Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv7;
		public event Action<int>? OnUv7Changed;
		[SyncRpc]
		public partial void f3(int a);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf1(int a, byte b);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf3(int a, double b);
		[SyncRpc(SyncType.UnreliableTarget)]
		private partial void uf5();
		public override bool IsDirtyReliable => false;
		public override bool IsDirtyUnreliable => false;
		public override void ClearDirtyReliable() { }
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer) { }
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void SerializeEveryProperty(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!V0.TryDeserialize(reader)) return false;
				OnV0Changed?.Invoke(V0);
			}
			if (dirtyReliable_0[1])
			{
				if (!V1.TryDeserialize(reader)) return false;
				OnV1Changed?.Invoke(V1);
			}
			if (dirtyReliable_0[2])
			{
				if (!reader.TryReadByte(out V2)) return false;
				OnV2Changed?.Invoke(V2);
			}
			if (dirtyReliable_0[3])
			{
				if (!reader.TryReadInt32(out var V4Value)) return false;
				V4 = (TestEnumType)V4Value;
				OnV4Changed?.Invoke(V4);
			}
			if (dirtyReliable_0[4])
			{
				if (!reader.TryReadUInt16(out _v5)) return false;
				OnV5Changed?.Invoke(_v5);
			}
			if (dirtyReliable_0[5])
			{
				if (!reader.TryReadInt16(out _v6)) return false;
				OnV6Changed?.Invoke(_v6);
			}
			if (dirtyReliable_0[6])
			{
				if (!reader.TryReadInt32(out _v7)) return false;
				OnV7Changed?.Invoke(_v7);
			}
			if (dirtyReliable_0[7])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadInt32(out int a)) return false;
					f3(a);
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0[0])
			{
				if (!reader.TryReadUInt32(out Uv0)) return false;
				OnUv0Changed?.Invoke(Uv0);
			}
			if (dirtyUnreliable_0[1])
			{
				if (!reader.TryReadUInt64(out Uv2)) return false;
				OnUv2Changed?.Invoke(Uv2);
			}
			if (dirtyUnreliable_0[2])
			{
				if (!reader.TryReadSingle(out Uv4)) return false;
				OnUv4Changed?.Invoke(Uv4);
			}
			if (dirtyUnreliable_0[3])
			{
				if (!Uv6.TryDeserialize(reader)) return false;
				OnUv6Changed?.Invoke(Uv6);
			}
			if (dirtyUnreliable_0[4])
			{
				if (!reader.TryReadInt32(out _uv7)) return false;
				OnUv7Changed?.Invoke(_uv7);
			}
			if (dirtyUnreliable_0[5])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadInt32(out int a)) return false;
					if (!reader.TryReadByte(out byte b)) return false;
					uf1(a, b);
				}
			}
			if (dirtyUnreliable_0[6])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadInt32(out int a)) return false;
					if (!reader.TryReadDouble(out double b)) return false;
					uf3(a, b);
				}
			}
			if (dirtyUnreliable_0[7])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					uf5();
				}
			}
			return true;
		}
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!V0.TryDeserialize(reader)) return false;
			OnV0Changed?.Invoke(V0);
			if (!V1.TryDeserialize(reader)) return false;
			OnV1Changed?.Invoke(V1);
			if (!reader.TryReadByte(out V2)) return false;
			OnV2Changed?.Invoke(V2);
			if (!reader.TryReadInt32(out var V4Value)) return false;
			V4 = (TestEnumType)V4Value;
			OnV4Changed?.Invoke(V4);
			if (!reader.TryReadUInt16(out _v5)) return false;
			OnV5Changed?.Invoke(_v5);
			if (!reader.TryReadInt16(out _v6)) return false;
			OnV6Changed?.Invoke(_v6);
			if (!reader.TryReadInt32(out _v7)) return false;
			OnV7Changed?.Invoke(_v7);
			if (!reader.TryReadUInt32(out Uv0)) return false;
			OnUv0Changed?.Invoke(Uv0);
			if (!reader.TryReadUInt64(out Uv2)) return false;
			OnUv2Changed?.Invoke(Uv2);
			if (!reader.TryReadSingle(out Uv4)) return false;
			OnUv4Changed?.Invoke(Uv4);
			if (!Uv6.TryDeserialize(reader)) return false;
			OnUv6Changed?.Invoke(Uv6);
			if (!reader.TryReadInt32(out _uv7)) return false;
			OnUv7Changed?.Invoke(_uv7);
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			V0 = new();
			V1 = new();
			V2 = 0;
			V4 = (TestEnumType)0;
			_v5 = 0;
			_v6 = 0;
			_v7 = 0;
			Uv0 = 0;
			Uv2 = 0;
			Uv4 = 0;
			Uv6 = new();
			_uv7 = 0;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				NetString.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[3])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[4])
			{
				reader.Ignore(2);
			}
			if (dirtyReliable_0[5])
			{
				reader.Ignore(2);
			}
			if (dirtyReliable_0[6])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[7])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				NetString.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[3])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[4])
			{
				reader.Ignore(2);
			}
			if (dirtyReliable_0[5])
			{
				reader.Ignore(2);
			}
			if (dirtyReliable_0[6])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[7])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyUnreliable_0[1])
			{
				reader.Ignore(8);
			}
			if (dirtyUnreliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyUnreliable_0[3])
			{
				UserId.IgnoreStatic(reader);
			}
			if (dirtyUnreliable_0[4])
			{
				reader.Ignore(4);
			}
			if (dirtyUnreliable_0[5])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(1);
				}
			}
			if (dirtyUnreliable_0[6])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(8);
				}
			}
			if (dirtyUnreliable_0[7])
			{
				reader.Ignore(1);
			}
		}
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyUnreliable_0[1])
			{
				reader.Ignore(8);
			}
			if (dirtyUnreliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyUnreliable_0[3])
			{
				UserId.IgnoreStatic(reader);
			}
			if (dirtyUnreliable_0[4])
			{
				reader.Ignore(4);
			}
			if (dirtyUnreliable_0[5])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(1);
				}
			}
			if (dirtyUnreliable_0[6])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(8);
				}
			}
			if (dirtyUnreliable_0[7])
			{
				reader.Ignore(1);
			}
		}
	}
}
#pragma warning restore CS0649
