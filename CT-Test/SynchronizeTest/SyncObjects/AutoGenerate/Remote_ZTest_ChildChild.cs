/*
 * Generated File : Remote_ZTest_ChildChild
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;


namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class ZTest_ChildChild
	{
		[SyncVar(dir: SyncDirection.FromRemote)]
		protected int _field_Client_CC5;
		[SyncVar(dir: SyncDirection.FromRemote)]
		protected int _field_Client_CC6;
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_CC5();
		[SyncRpc(dir: SyncDirection.FromRemote)]
		protected partial void Client_cc6();
		[SyncVar]
		protected int _field_Server_CC5;
		public int Field_Server_CC5 => _field_Server_CC5;
		protected Action<int>? _onField_Server_CC5Changed;
		public event Action<int> OnField_Server_CC5Changed
		{
			add => _onField_Server_CC5Changed += value;
			remove => _onField_Server_CC5Changed -= value;
		}
		[SyncVar]
		protected int _space_4;
		public int Space_4 => _space_4;
		protected Action<int>? _onSpace_4Changed;
		public event Action<int> OnSpace_4Changed
		{
			add => _onSpace_4Changed += value;
			remove => _onSpace_4Changed -= value;
		}
		[SyncVar]
		protected int _field_Server_CC6;
		protected Action<int>? _onField_Server_CC6Changed;
		public event Action<int> OnField_Server_CC6Changed
		{
			add => _onField_Server_CC6Changed += value;
			remove => _onField_Server_CC6Changed -= value;
		}
		[SyncVar]
		protected int _space_5;
		public int Space_5 => _space_5;
		protected Action<int>? _onSpace_5Changed;
		public event Action<int> OnSpace_5Changed
		{
			add => _onSpace_5Changed += value;
			remove => _onSpace_5Changed -= value;
		}
		[SyncVar]
		protected int _space_6;
		public int Space_6 => _space_6;
		protected Action<int>? _onSpace_6Changed;
		public event Action<int> OnSpace_6Changed
		{
			add => _onSpace_6Changed += value;
			remove => _onSpace_6Changed -= value;
		}
		[SyncRpc]
		public virtual partial void Server_CC5();
		[SyncRpc(SyncType.ReliableTarget)]
		protected virtual partial void Server_cc6();
		public ZTest_ChildChild()
		{
		}
		protected BitmaskByte _dirtyReliable_1 = new();
		public int Field_Client_CC5
		{
			get => _field_Client_CC5;
			set
			{
				if (_field_Client_CC5 == value) return;
				_field_Client_CC5 = value;
				_dirtyReliable_1[0] = true;
				MarkDirtyReliable();
			}
		}
		protected int Field_Client_CC6
		{
			get => _field_Client_CC6;
			set
			{
				if (_field_Client_CC6 == value) return;
				_field_Client_CC6 = value;
				_dirtyReliable_1[1] = true;
				MarkDirtyReliable();
			}
		}
		public partial void Client_CC5()
		{
			Client_CC5CallstackCount++;
			_dirtyReliable_1[2] = true;
			MarkDirtyReliable();
		}
		protected byte Client_CC5CallstackCount = 0;
		protected partial void Client_cc6()
		{
			Client_cc6CallstackCount++;
			_dirtyReliable_1[3] = true;
			MarkDirtyReliable();
		}
		protected byte Client_cc6CallstackCount = 0;
		public override void ClearDirtyReliable()
		{
			_isDirtyReliable = false;
			_dirtyReliable_0.Clear();
			Client_P1CallstackCount = 0;
			Client_p2iiCallstack.Clear();
			Client_C3CallstackCount = 0;
			Client_c4CallstackCount = 0;
			_dirtyReliable_1.Clear();
			Client_CC5CallstackCount = 0;
			Client_cc6CallstackCount = 0;
		}
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer)
		{
			_dirtyReliable_0.Serialize(writer);
			if (_dirtyReliable_0.AnyTrue())
			{
				if (_dirtyReliable_0[0])
				{
					writer.Put(_field_Client_P1);
				}
				if (_dirtyReliable_0[1])
				{
					writer.Put(_field_Client_P2);
				}
				if (_dirtyReliable_0[2])
				{
					writer.Put((byte)Client_P1CallstackCount);
				}
				if (_dirtyReliable_0[3])
				{
					byte count = (byte)Client_p2iiCallstack.Count;
					writer.Put(count);
					for (int i = 0; i < count; i++)
					{
						var arg = Client_p2iiCallstack[i];
						writer.Put(arg.a);
						writer.Put(arg.b);
					}
				}
				if (_dirtyReliable_0[4])
				{
					writer.Put(_field_Client_C3);
				}
				if (_dirtyReliable_0[5])
				{
					writer.Put(_field_Client_C4);
				}
				if (_dirtyReliable_0[6])
				{
					writer.Put((byte)Client_C3CallstackCount);
				}
				if (_dirtyReliable_0[7])
				{
					writer.Put((byte)Client_c4CallstackCount);
				}
			}
			_dirtyReliable_1.Serialize(writer);
			if (_dirtyReliable_1.AnyTrue())
			{
				if (_dirtyReliable_1[0])
				{
					writer.Put(_field_Client_CC5);
				}
				if (_dirtyReliable_1[1])
				{
					writer.Put(_field_Client_CC6);
				}
				if (_dirtyReliable_1[2])
				{
					writer.Put((byte)Client_CC5CallstackCount);
				}
				if (_dirtyReliable_1[3])
				{
					writer.Put((byte)Client_cc6CallstackCount);
				}
			}
		}
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void InitializeMasterProperties()
		{
			_field_Client_P1 = 0;
			_field_Client_P2 = 0;
			_field_Client_C3 = 0;
			_field_Client_C4 = 0;
			_field_Client_CC5 = 0;
			_field_Client_CC6 = 0;
		}
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
				if (dirtyReliable_0[0])
				{
					if (!reader.TryReadInt32(out _field_Server_P1)) return false;
					_onField_Server_P1Changed?.Invoke(_field_Server_P1);
				}
				if (dirtyReliable_0[1])
				{
					if (!reader.TryReadSingle(out _field_Server_P2)) return false;
					_onField_Server_P2Changed?.Invoke(_field_Server_P2);
				}
				if (dirtyReliable_0[2])
				{
					if (!reader.TryReadInt32(out _space_1)) return false;
					_onSpace_1Changed?.Invoke(_space_1);
				}
				if (dirtyReliable_0[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						Server_P1();
					}
				}
				if (dirtyReliable_0[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						if (!reader.TryReadInt32(out int b)) return false;
						Server_p2(a, b);
					}
				}
				if (dirtyReliable_0[5])
				{
					if (!reader.TryReadInt32(out _field_Server_C3)) return false;
					_onField_Server_C3Changed?.Invoke(_field_Server_C3);
				}
				if (dirtyReliable_0[6])
				{
					if (!reader.TryReadInt32(out _field_Server_C4)) return false;
					_onField_Server_C4Changed?.Invoke(_field_Server_C4);
				}
				if (dirtyReliable_0[7])
				{
					if (!reader.TryReadInt32(out _space_2)) return false;
					_onSpace_2Changed?.Invoke(_space_2);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
				if (dirtyReliable_1[0])
				{
					if (!reader.TryReadInt32(out _space_3)) return false;
					_onSpace_3Changed?.Invoke(_space_3);
				}
				if (dirtyReliable_1[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						Server_C3();
					}
				}
				if (dirtyReliable_1[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						Server_c4();
					}
				}
				if (dirtyReliable_1[3])
				{
					if (!reader.TryReadInt32(out _field_Server_CC5)) return false;
					_onField_Server_CC5Changed?.Invoke(_field_Server_CC5);
				}
				if (dirtyReliable_1[4])
				{
					if (!reader.TryReadInt32(out _space_4)) return false;
					_onSpace_4Changed?.Invoke(_space_4);
				}
				if (dirtyReliable_1[5])
				{
					if (!reader.TryReadInt32(out _field_Server_CC6)) return false;
					_onField_Server_CC6Changed?.Invoke(_field_Server_CC6);
				}
				if (dirtyReliable_1[6])
				{
					if (!reader.TryReadInt32(out _space_5)) return false;
					_onSpace_5Changed?.Invoke(_space_5);
				}
				if (dirtyReliable_1[7])
				{
					if (!reader.TryReadInt32(out _space_6)) return false;
					_onSpace_6Changed?.Invoke(_space_6);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyReliable_2 = reader.ReadBitmaskByte();
				if (dirtyReliable_2[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						Server_CC5();
					}
				}
				if (dirtyReliable_2[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						Server_cc6();
					}
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!reader.TryReadInt32(out _field_Server_P1)) return false;
			if (!reader.TryReadSingle(out _field_Server_P2)) return false;
			if (!reader.TryReadInt32(out _space_1)) return false;
			if (!reader.TryReadInt32(out _field_Server_C3)) return false;
			if (!reader.TryReadInt32(out _field_Server_C4)) return false;
			if (!reader.TryReadInt32(out _space_2)) return false;
			if (!reader.TryReadInt32(out _space_3)) return false;
			if (!reader.TryReadInt32(out _field_Server_CC5)) return false;
			if (!reader.TryReadInt32(out _space_4)) return false;
			if (!reader.TryReadInt32(out _field_Server_CC6)) return false;
			if (!reader.TryReadInt32(out _space_5)) return false;
			if (!reader.TryReadInt32(out _space_6)) return false;
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_field_Server_P1 = 0;
			_field_Server_P2 = 0;
			_space_1 = 0;
			_field_Server_C3 = 0;
			_field_Server_C4 = 0;
			_space_2 = 0;
			_space_3 = 0;
			_field_Server_CC5 = 0;
			_space_4 = 0;
			_field_Server_CC6 = 0;
			_space_5 = 0;
			_space_6 = 0;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
				if (dirtyReliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
				if (dirtyReliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[1])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[2])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyReliable_2 = reader.ReadBitmaskByte();
				if (dirtyReliable_2[0])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_2[1])
				{
					reader.Ignore(1);
				}
			}
		}
		public new static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
				if (dirtyReliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
				if (dirtyReliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[1])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[2])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyReliable_2 = reader.ReadBitmaskByte();
				if (dirtyReliable_2[0])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_2[1])
				{
					reader.Ignore(1);
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public new static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
