/*
 * Generated File : Remote_ZTest_Value16
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.DataType.Synchronizations;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
#if UNITY_2021
using UnityEngine;
#endif

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class ZTest_Value16
	{
		[SyncVar]
		private int _v0;
		public int V0 => _v0;
		public event Action<int>? OnV0Changed;
		[SyncVar]
		private int _v1;
		public int V1 => _v1;
		public event Action<int>? OnV1Changed;
		[SyncVar]
		private int _v2;
		public int V2 => _v2;
		public event Action<int>? OnV2Changed;
		[SyncVar]
		private NetString _v4 = new();
		public NetString V4 => _v4;
		public event Action<NetString>? OnV4Changed;
		[SyncVar]
		private NetStringShort _v5 = new();
		public NetStringShort V5 => _v5;
		public event Action<NetStringShort>? OnV5Changed;
		[SyncObject]
		private SyncList<UserId> _v6 = new();
		public event Action<SyncList<UserId>>? OnV6Changed;
		[SyncObject]
		private ZTest_InnerObject _v7 = new();
		public event Action<ZTest_InnerObject>? OnV7Changed;
		[SyncVar]
		private ushort _v8;
		public ushort V8 => _v8;
		public event Action<ushort>? OnV8Changed;
		[SyncVar]
		private byte _v10;
		public event Action<byte>? OnV10Changed;
		[SyncVar]
		private int _v12;
		public event Action<int>? OnV12Changed;
		[SyncObject]
		private ZTest_InnerObject _v13 = new();
		public event Action<ZTest_InnerObject>? OnV13Changed;
		[SyncObject]
		private SyncList<UserId> _v15 = new();
		public event Action<SyncList<UserId>>? OnV15Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv0;
		public int Uv0 => _uv0;
		public event Action<int>? OnUv0Changed;
		[SyncVar(SyncType.Unreliable)]
		private ulong _uv2;
		public ulong Uv2 => _uv2;
		public event Action<ulong>? OnUv2Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv4;
		public int Uv4 => _uv4;
		public event Action<int>? OnUv4Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv5;
		public int Uv5 => _uv5;
		public event Action<int>? OnUv5Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv6;
		public int Uv6 => _uv6;
		public event Action<int>? OnUv6Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv7;
		public event Action<int>? OnUv7Changed;
		[SyncVar(SyncType.Unreliable)]
		private ushort _uv8;
		public event Action<ushort>? OnUv8Changed;
		[SyncVar(SyncType.Unreliable)]
		private float _uv10;
		public float Uv10 => _uv10;
		public event Action<float>? OnUv10Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv12;
		public int Uv12 => _uv12;
		public event Action<int>? OnUv12Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv13;
		public event Action<int>? OnUv13Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv15;
		public int Uv15 => _uv15;
		public event Action<int>? OnUv15Changed;
		[SyncRpc]
		public partial void f3(int a);
		[SyncRpc]
		private partial void f9();
		[SyncRpc]
		private partial void f14(int a, sbyte b);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf1(int a, sbyte b);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf3(int a, float b, TestEnumType c);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf9();
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf14(int a);
		public override bool IsDirtyReliable => false;
		public override bool IsDirtyUnreliable => false;
		public override void ClearDirtyReliable() { }
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer) { }
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void SerializeEveryProperty(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					if (!reader.TryReadInt32(out _v0)) return false;
					OnV0Changed?.Invoke(_v0);
				}
				if (dirtyReliable_0[1])
				{
					if (!reader.TryReadInt32(out _v1)) return false;
					OnV1Changed?.Invoke(_v1);
				}
				if (dirtyReliable_0[2])
				{
					if (!reader.TryReadInt32(out _v2)) return false;
					OnV2Changed?.Invoke(_v2);
				}
				if (dirtyReliable_0[3])
				{
					if (!_v4.TryDeserialize(reader)) return false;
					OnV4Changed?.Invoke(_v4);
				}
				if (dirtyReliable_0[4])
				{
					if (!_v5.TryDeserialize(reader)) return false;
					OnV5Changed?.Invoke(_v5);
				}
				if (dirtyReliable_0[5])
				{
					if (!_v6.TryDeserializeSyncReliable(reader)) return false;
					OnV6Changed?.Invoke(_v6);
				}
				if (dirtyReliable_0[6])
				{
					if (!_v7.TryDeserializeSyncReliable(reader)) return false;
					OnV7Changed?.Invoke(_v7);
				}
				if (dirtyReliable_0[7])
				{
					if (!reader.TryReadUInt16(out _v8)) return false;
					OnV8Changed?.Invoke(_v8);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					if (!reader.TryReadByte(out _v10)) return false;
					OnV10Changed?.Invoke(_v10);
				}
				if (dirtyReliable_1[1])
				{
					if (!reader.TryReadInt32(out _v12)) return false;
					OnV12Changed?.Invoke(_v12);
				}
				if (dirtyReliable_1[2])
				{
					if (!_v13.TryDeserializeSyncReliable(reader)) return false;
					OnV13Changed?.Invoke(_v13);
				}
				if (dirtyReliable_1[3])
				{
					if (!_v15.TryDeserializeSyncReliable(reader)) return false;
					OnV15Changed?.Invoke(_v15);
				}
				if (dirtyReliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						f3(a);
					}
				}
				if (dirtyReliable_1[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						f9();
					}
				}
				if (dirtyReliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						if (!reader.TryReadSByte(out sbyte b)) return false;
						f14(a, b);
					}
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0.AnyTrue())
			{
				if (dirtyUnreliable_0[0])
				{
					if (!reader.TryReadInt32(out _uv0)) return false;
					OnUv0Changed?.Invoke(_uv0);
				}
				if (dirtyUnreliable_0[1])
				{
					if (!reader.TryReadUInt64(out _uv2)) return false;
					OnUv2Changed?.Invoke(_uv2);
				}
				if (dirtyUnreliable_0[2])
				{
					if (!reader.TryReadInt32(out _uv4)) return false;
					OnUv4Changed?.Invoke(_uv4);
				}
				if (dirtyUnreliable_0[3])
				{
					if (!reader.TryReadInt32(out _uv5)) return false;
					OnUv5Changed?.Invoke(_uv5);
				}
				if (dirtyUnreliable_0[4])
				{
					if (!reader.TryReadInt32(out _uv6)) return false;
					OnUv6Changed?.Invoke(_uv6);
				}
				if (dirtyUnreliable_0[5])
				{
					if (!reader.TryReadInt32(out _uv7)) return false;
					OnUv7Changed?.Invoke(_uv7);
				}
				if (dirtyUnreliable_0[6])
				{
					if (!reader.TryReadUInt16(out _uv8)) return false;
					OnUv8Changed?.Invoke(_uv8);
				}
				if (dirtyUnreliable_0[7])
				{
					if (!reader.TryReadSingle(out _uv10)) return false;
					OnUv10Changed?.Invoke(_uv10);
				}
			}
			BitmaskByte dirtyUnreliable_1 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_1.AnyTrue())
			{
				if (dirtyUnreliable_1[0])
				{
					if (!reader.TryReadInt32(out _uv12)) return false;
					OnUv12Changed?.Invoke(_uv12);
				}
				if (dirtyUnreliable_1[1])
				{
					if (!reader.TryReadInt32(out _uv13)) return false;
					OnUv13Changed?.Invoke(_uv13);
				}
				if (dirtyUnreliable_1[2])
				{
					if (!reader.TryReadInt32(out _uv15)) return false;
					OnUv15Changed?.Invoke(_uv15);
				}
				if (dirtyUnreliable_1[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						if (!reader.TryReadSByte(out sbyte b)) return false;
						uf1(a, b);
					}
				}
				if (dirtyUnreliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						if (!reader.TryReadSingle(out float b)) return false;
						if (!reader.TryReadInt32(out var cValue)) return false;
						TestEnumType c = (TestEnumType)cValue;
						uf3(a, b, c);
					}
				}
				if (dirtyUnreliable_1[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						uf9();
					}
				}
				if (dirtyUnreliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						uf14(a);
					}
				}
			}
			return true;
		}
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!reader.TryReadInt32(out _v0)) return false;
			OnV0Changed?.Invoke(_v0);
			if (!reader.TryReadInt32(out _v1)) return false;
			OnV1Changed?.Invoke(_v1);
			if (!reader.TryReadInt32(out _v2)) return false;
			OnV2Changed?.Invoke(_v2);
			if (!_v4.TryDeserialize(reader)) return false;
			OnV4Changed?.Invoke(_v4);
			if (!_v5.TryDeserialize(reader)) return false;
			OnV5Changed?.Invoke(_v5);
			if (!_v6.TryDeserializeEveryProperty(reader)) return false;
			OnV6Changed?.Invoke(_v6);
			if (!_v7.TryDeserializeEveryProperty(reader)) return false;
			OnV7Changed?.Invoke(_v7);
			if (!reader.TryReadUInt16(out _v8)) return false;
			OnV8Changed?.Invoke(_v8);
			if (!reader.TryReadByte(out _v10)) return false;
			OnV10Changed?.Invoke(_v10);
			if (!reader.TryReadInt32(out _v12)) return false;
			OnV12Changed?.Invoke(_v12);
			if (!_v13.TryDeserializeEveryProperty(reader)) return false;
			OnV13Changed?.Invoke(_v13);
			if (!_v15.TryDeserializeEveryProperty(reader)) return false;
			OnV15Changed?.Invoke(_v15);
			if (!reader.TryReadInt32(out _uv0)) return false;
			OnUv0Changed?.Invoke(_uv0);
			if (!reader.TryReadUInt64(out _uv2)) return false;
			OnUv2Changed?.Invoke(_uv2);
			if (!reader.TryReadInt32(out _uv4)) return false;
			OnUv4Changed?.Invoke(_uv4);
			if (!reader.TryReadInt32(out _uv5)) return false;
			OnUv5Changed?.Invoke(_uv5);
			if (!reader.TryReadInt32(out _uv6)) return false;
			OnUv6Changed?.Invoke(_uv6);
			if (!reader.TryReadInt32(out _uv7)) return false;
			OnUv7Changed?.Invoke(_uv7);
			if (!reader.TryReadUInt16(out _uv8)) return false;
			OnUv8Changed?.Invoke(_uv8);
			if (!reader.TryReadSingle(out _uv10)) return false;
			OnUv10Changed?.Invoke(_uv10);
			if (!reader.TryReadInt32(out _uv12)) return false;
			OnUv12Changed?.Invoke(_uv12);
			if (!reader.TryReadInt32(out _uv13)) return false;
			OnUv13Changed?.Invoke(_uv13);
			if (!reader.TryReadInt32(out _uv15)) return false;
			OnUv15Changed?.Invoke(_uv15);
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_v0 = 0;
			_v1 = 0;
			_v2 = 0;
			_v4 = new();
			_v5 = new();
			_v6.InitializeRemoteProperties();
			_v7.InitializeRemoteProperties();
			_v8 = 0;
			_v10 = 0;
			_v12 = 0;
			_v13.InitializeRemoteProperties();
			_v15.InitializeRemoteProperties();
			_uv0 = 0;
			_uv2 = 0;
			_uv4 = 0;
			_uv5 = 0;
			_uv6 = 0;
			_uv7 = 0;
			_uv8 = 0;
			_uv10 = 0;
			_uv12 = 0;
			_uv13 = 0;
			_uv15 = 0;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					NetString.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[4])
				{
					NetStringShort.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[5])
				{
					_v6.IgnoreSyncReliable(reader);
				}
				if (dirtyReliable_0[6])
				{
					_v7.IgnoreSyncReliable(reader);
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(2);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[2])
				{
					_v13.IgnoreSyncReliable(reader);
				}
				if (dirtyReliable_1[3])
				{
					_v15.IgnoreSyncReliable(reader);
				}
				if (dirtyReliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_1[5])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(1);
					}
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					NetString.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[4])
				{
					NetStringShort.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[5])
				{
					SyncList<UserId>.IgnoreSyncStaticReliable(reader);
				}
				if (dirtyReliable_0[6])
				{
					ZTest_InnerObject.IgnoreSyncStaticReliable(reader);
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(2);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[2])
				{
					ZTest_InnerObject.IgnoreSyncStaticReliable(reader);
				}
				if (dirtyReliable_1[3])
				{
					SyncList<UserId>.IgnoreSyncStaticReliable(reader);
				}
				if (dirtyReliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_1[5])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(1);
					}
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0.AnyTrue())
			{
				if (dirtyUnreliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[1])
				{
					reader.Ignore(8);
				}
				if (dirtyUnreliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[6])
				{
					reader.Ignore(2);
				}
				if (dirtyUnreliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			BitmaskByte dirtyUnreliable_1 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_1.AnyTrue())
			{
				if (dirtyUnreliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(1);
					}
				}
				if (dirtyUnreliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_1[5])
				{
					reader.Ignore(1);
				}
				if (dirtyUnreliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
			}
		}
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0.AnyTrue())
			{
				if (dirtyUnreliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[1])
				{
					reader.Ignore(8);
				}
				if (dirtyUnreliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[6])
				{
					reader.Ignore(2);
				}
				if (dirtyUnreliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			BitmaskByte dirtyUnreliable_1 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_1.AnyTrue())
			{
				if (dirtyUnreliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(1);
					}
				}
				if (dirtyUnreliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_1[5])
				{
					reader.Ignore(1);
				}
				if (dirtyUnreliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
			}
		}
	}
}
#pragma warning restore CS0649
