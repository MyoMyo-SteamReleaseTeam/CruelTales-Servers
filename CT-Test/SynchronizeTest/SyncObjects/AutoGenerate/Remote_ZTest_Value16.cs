/*
 * Generated File : Remote_ZTest_Value16
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
#if UNITY_2021
using UnityEngine;
#endif

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class ZTest_Value16
	{
		[SyncVar]
		public int V0;
		public event Action<int>? OnV0Changed;
		[SyncVar]
		public int V1;
		public event Action<int>? OnV1Changed;
		[SyncVar]
		public int V2;
		public event Action<int>? OnV2Changed;
		[SyncVar]
		public NetString V4 = new();
		public event Action<NetString>? OnV4Changed;
		[SyncVar]
		public NetStringShort V5 = new();
		public event Action<NetStringShort>? OnV5Changed;
		[SyncVar]
		public byte V6;
		public event Action<byte>? OnV6Changed;
		[SyncVar]
		public int V7;
		public event Action<int>? OnV7Changed;
		[SyncVar]
		public ushort V8;
		public event Action<ushort>? OnV8Changed;
		[SyncVar]
		private byte _v10;
		public event Action<byte>? OnV10Changed;
		[SyncVar]
		private int _v12;
		public event Action<int>? OnV12Changed;
		[SyncVar]
		private short _v13;
		public event Action<short>? OnV13Changed;
		[SyncVar]
		private int _v15;
		public event Action<int>? OnV15Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv0;
		public event Action<int>? OnUv0Changed;
		[SyncVar(SyncType.Unreliable)]
		public ulong Uv2;
		public event Action<ulong>? OnUv2Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv4;
		public event Action<int>? OnUv4Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv5;
		public event Action<int>? OnUv5Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv6;
		public event Action<int>? OnUv6Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv7;
		public event Action<int>? OnUv7Changed;
		[SyncVar(SyncType.Unreliable)]
		private ushort _uv8;
		public event Action<ushort>? OnUv8Changed;
		[SyncVar(SyncType.Unreliable)]
		public float Uv10;
		public event Action<float>? OnUv10Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv12;
		public event Action<int>? OnUv12Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv13;
		public event Action<int>? OnUv13Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv15;
		public event Action<int>? OnUv15Changed;
		[SyncRpc]
		public partial void f3(int a);
		[SyncRpc]
		private partial void f9();
		[SyncRpc]
		private partial void f14(int a, sbyte b);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf1(int a, sbyte b);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf3(int a, float b, TestEnumType c);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf9();
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf14(int a);
		public override bool IsDirtyReliable => false;
		public override bool IsDirtyUnreliable => false;
		public override void ClearDirtyReliable() { }
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer) { }
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void SerializeEveryProperty(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					if (!reader.TryReadInt32(out V0)) return false;
					OnV0Changed?.Invoke(V0);
				}
				if (dirtyReliable_0[1])
				{
					if (!reader.TryReadInt32(out V1)) return false;
					OnV1Changed?.Invoke(V1);
				}
				if (dirtyReliable_0[2])
				{
					if (!reader.TryReadInt32(out V2)) return false;
					OnV2Changed?.Invoke(V2);
				}
				if (dirtyReliable_0[3])
				{
					if (!V4.TryDeserialize(reader)) return false;
					OnV4Changed?.Invoke(V4);
				}
				if (dirtyReliable_0[4])
				{
					if (!V5.TryDeserialize(reader)) return false;
					OnV5Changed?.Invoke(V5);
				}
				if (dirtyReliable_0[5])
				{
					if (!reader.TryReadByte(out V6)) return false;
					OnV6Changed?.Invoke(V6);
				}
				if (dirtyReliable_0[6])
				{
					if (!reader.TryReadInt32(out V7)) return false;
					OnV7Changed?.Invoke(V7);
				}
				if (dirtyReliable_0[7])
				{
					if (!reader.TryReadUInt16(out V8)) return false;
					OnV8Changed?.Invoke(V8);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					if (!reader.TryReadByte(out _v10)) return false;
					OnV10Changed?.Invoke(_v10);
				}
				if (dirtyReliable_1[1])
				{
					if (!reader.TryReadInt32(out _v12)) return false;
					OnV12Changed?.Invoke(_v12);
				}
				if (dirtyReliable_1[2])
				{
					if (!reader.TryReadInt16(out _v13)) return false;
					OnV13Changed?.Invoke(_v13);
				}
				if (dirtyReliable_1[3])
				{
					if (!reader.TryReadInt32(out _v15)) return false;
					OnV15Changed?.Invoke(_v15);
				}
				if (dirtyReliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						f3(a);
					}
				}
				if (dirtyReliable_1[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						f9();
					}
				}
				if (dirtyReliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						if (!reader.TryReadSByte(out sbyte b)) return false;
						f14(a, b);
					}
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0.AnyTrue())
			{
				if (dirtyUnreliable_0[0])
				{
					if (!reader.TryReadInt32(out Uv0)) return false;
					OnUv0Changed?.Invoke(Uv0);
				}
				if (dirtyUnreliable_0[1])
				{
					if (!reader.TryReadUInt64(out Uv2)) return false;
					OnUv2Changed?.Invoke(Uv2);
				}
				if (dirtyUnreliable_0[2])
				{
					if (!reader.TryReadInt32(out Uv4)) return false;
					OnUv4Changed?.Invoke(Uv4);
				}
				if (dirtyUnreliable_0[3])
				{
					if (!reader.TryReadInt32(out Uv5)) return false;
					OnUv5Changed?.Invoke(Uv5);
				}
				if (dirtyUnreliable_0[4])
				{
					if (!reader.TryReadInt32(out Uv6)) return false;
					OnUv6Changed?.Invoke(Uv6);
				}
				if (dirtyUnreliable_0[5])
				{
					if (!reader.TryReadInt32(out _uv7)) return false;
					OnUv7Changed?.Invoke(_uv7);
				}
				if (dirtyUnreliable_0[6])
				{
					if (!reader.TryReadUInt16(out _uv8)) return false;
					OnUv8Changed?.Invoke(_uv8);
				}
				if (dirtyUnreliable_0[7])
				{
					if (!reader.TryReadSingle(out Uv10)) return false;
					OnUv10Changed?.Invoke(Uv10);
				}
			}
			BitmaskByte dirtyUnreliable_1 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_1.AnyTrue())
			{
				if (dirtyUnreliable_1[0])
				{
					if (!reader.TryReadInt32(out Uv12)) return false;
					OnUv12Changed?.Invoke(Uv12);
				}
				if (dirtyUnreliable_1[1])
				{
					if (!reader.TryReadInt32(out _uv13)) return false;
					OnUv13Changed?.Invoke(_uv13);
				}
				if (dirtyUnreliable_1[2])
				{
					if (!reader.TryReadInt32(out Uv15)) return false;
					OnUv15Changed?.Invoke(Uv15);
				}
				if (dirtyUnreliable_1[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						if (!reader.TryReadSByte(out sbyte b)) return false;
						uf1(a, b);
					}
				}
				if (dirtyUnreliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						if (!reader.TryReadSingle(out float b)) return false;
						if (!reader.TryReadInt32(out var cValue)) return false;
						TestEnumType c = (TestEnumType)cValue;
						uf3(a, b, c);
					}
				}
				if (dirtyUnreliable_1[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						uf9();
					}
				}
				if (dirtyUnreliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						uf14(a);
					}
				}
			}
			return true;
		}
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!reader.TryReadInt32(out V0)) return false;
			OnV0Changed?.Invoke(V0);
			if (!reader.TryReadInt32(out V1)) return false;
			OnV1Changed?.Invoke(V1);
			if (!reader.TryReadInt32(out V2)) return false;
			OnV2Changed?.Invoke(V2);
			if (!V4.TryDeserialize(reader)) return false;
			OnV4Changed?.Invoke(V4);
			if (!V5.TryDeserialize(reader)) return false;
			OnV5Changed?.Invoke(V5);
			if (!reader.TryReadByte(out V6)) return false;
			OnV6Changed?.Invoke(V6);
			if (!reader.TryReadInt32(out V7)) return false;
			OnV7Changed?.Invoke(V7);
			if (!reader.TryReadUInt16(out V8)) return false;
			OnV8Changed?.Invoke(V8);
			if (!reader.TryReadByte(out _v10)) return false;
			OnV10Changed?.Invoke(_v10);
			if (!reader.TryReadInt32(out _v12)) return false;
			OnV12Changed?.Invoke(_v12);
			if (!reader.TryReadInt16(out _v13)) return false;
			OnV13Changed?.Invoke(_v13);
			if (!reader.TryReadInt32(out _v15)) return false;
			OnV15Changed?.Invoke(_v15);
			if (!reader.TryReadInt32(out Uv0)) return false;
			OnUv0Changed?.Invoke(Uv0);
			if (!reader.TryReadUInt64(out Uv2)) return false;
			OnUv2Changed?.Invoke(Uv2);
			if (!reader.TryReadInt32(out Uv4)) return false;
			OnUv4Changed?.Invoke(Uv4);
			if (!reader.TryReadInt32(out Uv5)) return false;
			OnUv5Changed?.Invoke(Uv5);
			if (!reader.TryReadInt32(out Uv6)) return false;
			OnUv6Changed?.Invoke(Uv6);
			if (!reader.TryReadInt32(out _uv7)) return false;
			OnUv7Changed?.Invoke(_uv7);
			if (!reader.TryReadUInt16(out _uv8)) return false;
			OnUv8Changed?.Invoke(_uv8);
			if (!reader.TryReadSingle(out Uv10)) return false;
			OnUv10Changed?.Invoke(Uv10);
			if (!reader.TryReadInt32(out Uv12)) return false;
			OnUv12Changed?.Invoke(Uv12);
			if (!reader.TryReadInt32(out _uv13)) return false;
			OnUv13Changed?.Invoke(_uv13);
			if (!reader.TryReadInt32(out Uv15)) return false;
			OnUv15Changed?.Invoke(Uv15);
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			V0 = 0;
			V1 = 0;
			V2 = 0;
			V4 = new();
			V5 = new();
			V6 = 0;
			V7 = 0;
			V8 = 0;
			_v10 = 0;
			_v12 = 0;
			_v13 = 0;
			_v15 = 0;
			Uv0 = 0;
			Uv2 = 0;
			Uv4 = 0;
			Uv5 = 0;
			Uv6 = 0;
			_uv7 = 0;
			_uv8 = 0;
			Uv10 = 0;
			Uv12 = 0;
			_uv13 = 0;
			Uv15 = 0;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					NetString.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[4])
				{
					NetStringShort.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[5])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(2);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[2])
				{
					reader.Ignore(2);
				}
				if (dirtyReliable_1[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_1[5])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(1);
					}
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					NetString.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[4])
				{
					NetStringShort.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[5])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(2);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[2])
				{
					reader.Ignore(2);
				}
				if (dirtyReliable_1[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_1[5])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(1);
					}
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0.AnyTrue())
			{
				if (dirtyUnreliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[1])
				{
					reader.Ignore(8);
				}
				if (dirtyUnreliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[6])
				{
					reader.Ignore(2);
				}
				if (dirtyUnreliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			BitmaskByte dirtyUnreliable_1 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_1.AnyTrue())
			{
				if (dirtyUnreliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(1);
					}
				}
				if (dirtyUnreliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_1[5])
				{
					reader.Ignore(1);
				}
				if (dirtyUnreliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
			}
		}
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0.AnyTrue())
			{
				if (dirtyUnreliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[1])
				{
					reader.Ignore(8);
				}
				if (dirtyUnreliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[6])
				{
					reader.Ignore(2);
				}
				if (dirtyUnreliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			BitmaskByte dirtyUnreliable_1 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_1.AnyTrue())
			{
				if (dirtyUnreliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(1);
					}
				}
				if (dirtyUnreliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_1[5])
				{
					reader.Ignore(1);
				}
				if (dirtyUnreliable_1[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
			}
		}
	}
}
#pragma warning restore CS0649
