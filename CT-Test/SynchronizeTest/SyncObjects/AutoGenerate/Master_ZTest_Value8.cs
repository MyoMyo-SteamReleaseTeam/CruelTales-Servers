/*
 * Generated File : Master_ZTest_Value8
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTS.Instance.Gameplay;
using CTS.Instance.Synchronizations;
using CTS.Instance.SyncObjects;

namespace CTS.Instance.SyncObjects
{
	[Serializable]
	public partial class ZTest_Value8
	{
		[SyncVar]
		private NetString _v0 = new();
		[SyncVar]
		private NetStringShort _v1 = new();
		[SyncVar]
		private byte _v2;
		[SyncVar]
		private sbyte _v4;
		[SyncVar]
		private ushort _v5;
		[SyncVar]
		private short _v6;
		[SyncVar]
		private int _v7;
		[SyncVar(SyncType.Unreliable)]
		private uint _uv0;
		[SyncVar(SyncType.Unreliable)]
		private long _uv1;
		[SyncVar(SyncType.Unreliable)]
		private ulong _uv2;
		[SyncVar(SyncType.Unreliable)]
		private float _uv4;
		[SyncVar(SyncType.Unreliable)]
		private double _uv5;
		[SyncVar(SyncType.Unreliable)]
		private UserId _uv6 = new();
		[SyncVar(SyncType.Unreliable)]
		private int _uv7;
		[SyncRpc(SyncType.ReliableTarget)]
		public partial void f3(NetworkPlayer player, int a);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf3(NetworkPlayer player, int a);
		private BitmaskByte _dirtyReliable_0 = new();
		private BitmaskByte _dirtyUnreliable_0 = new();
		public override bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _dirtyReliable_0.AnyTrue();
				return isDirty;
			}
		}
		public override bool IsDirtyUnreliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _dirtyUnreliable_0.AnyTrue();
				return isDirty;
			}
		}
		public NetString V0
		{
			get => _v0;
			set
			{
				if (_v0 == value) return;
				_v0 = value;
				_dirtyReliable_0[0] = true;
			}
		}
		public NetStringShort V1
		{
			get => _v1;
			set
			{
				if (_v1 == value) return;
				_v1 = value;
				_dirtyReliable_0[1] = true;
			}
		}
		public byte V2
		{
			get => _v2;
			set
			{
				if (_v2 == value) return;
				_v2 = value;
				_dirtyReliable_0[2] = true;
			}
		}
		public sbyte V4
		{
			get => _v4;
			set
			{
				if (_v4 == value) return;
				_v4 = value;
				_dirtyReliable_0[3] = true;
			}
		}
		public ushort V5
		{
			get => _v5;
			set
			{
				if (_v5 == value) return;
				_v5 = value;
				_dirtyReliable_0[4] = true;
			}
		}
		public short V6
		{
			get => _v6;
			set
			{
				if (_v6 == value) return;
				_v6 = value;
				_dirtyReliable_0[5] = true;
			}
		}
		public int V7
		{
			get => _v7;
			set
			{
				if (_v7 == value) return;
				_v7 = value;
				_dirtyReliable_0[6] = true;
			}
		}
		public partial void f3(NetworkPlayer player, int a)
		{
			f3Callstack.Add(player, a);
			_dirtyReliable_0[7] = true;
		}
		private TargetCallstack<NetworkPlayer, int> f3Callstack = new(8);
		public uint Uv0
		{
			get => _uv0;
			set
			{
				if (_uv0 == value) return;
				_uv0 = value;
				_dirtyUnreliable_0[0] = true;
			}
		}
		public long Uv1
		{
			get => _uv1;
			set
			{
				if (_uv1 == value) return;
				_uv1 = value;
				_dirtyUnreliable_0[1] = true;
			}
		}
		public ulong Uv2
		{
			get => _uv2;
			set
			{
				if (_uv2 == value) return;
				_uv2 = value;
				_dirtyUnreliable_0[2] = true;
			}
		}
		public float Uv4
		{
			get => _uv4;
			set
			{
				if (_uv4 == value) return;
				_uv4 = value;
				_dirtyUnreliable_0[3] = true;
			}
		}
		public double Uv5
		{
			get => _uv5;
			set
			{
				if (_uv5 == value) return;
				_uv5 = value;
				_dirtyUnreliable_0[4] = true;
			}
		}
		public UserId Uv6
		{
			get => _uv6;
			set
			{
				if (_uv6 == value) return;
				_uv6 = value;
				_dirtyUnreliable_0[5] = true;
			}
		}
		public int Uv7
		{
			get => _uv7;
			set
			{
				if (_uv7 == value) return;
				_uv7 = value;
				_dirtyUnreliable_0[6] = true;
			}
		}
		public partial void uf3(NetworkPlayer player, int a)
		{
			uf3Callstack.Add(player, a);
			_dirtyUnreliable_0[7] = true;
		}
		private TargetCallstack<NetworkPlayer, int> uf3Callstack = new(8);
		public override void ClearDirtyReliable()
		{
			_dirtyReliable_0.Clear();
			f3Callstack.Clear();
		}
		public override void ClearDirtyUnreliable()
		{
			_dirtyUnreliable_0.Clear();
			uf3Callstack.Clear();
		}
		public override void SerializeSyncReliable(NetworkPlayer player, IPacketWriter writer)
		{
			BitmaskByte dirtyReliable_0 = _dirtyReliable_0;
			int dirtyReliable_0_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyReliable_0[0])
			{
				_v0.Serialize(writer);
			}
			if (_dirtyReliable_0[1])
			{
				_v1.Serialize(writer);
			}
			if (_dirtyReliable_0[2])
			{
				writer.Put(_v2);
			}
			if (_dirtyReliable_0[3])
			{
				writer.Put(_v4);
			}
			if (_dirtyReliable_0[4])
			{
				writer.Put(_v5);
			}
			if (_dirtyReliable_0[5])
			{
				writer.Put(_v6);
			}
			if (_dirtyReliable_0[6])
			{
				writer.Put(_v7);
			}
			if (_dirtyReliable_0[7])
			{
				int f3Count = f3Callstack.GetCallCount(player);
				if (f3Count > 0)
				{
					var f3callList = f3Callstack.GetCallList(player);
					writer.Put((byte)f3Count);
					for (int i = 0; i < f3Count; i++)
					{
						var arg = f3callList[i];
						writer.Put(arg);
					}
				}
				else
				{
					dirtyReliable_0[7] = false;
				}
			}
			if (dirtyReliable_0.AnyTrue())
			{
				writer.PutTo(dirtyReliable_0, dirtyReliable_0_pos);
			}
			else
			{
				writer.SetSize(dirtyReliable_0_pos);
			}
		}
		public override void SerializeSyncUnreliable(NetworkPlayer player, IPacketWriter writer)
		{
			BitmaskByte dirtyUnreliable_0 = _dirtyUnreliable_0;
			int dirtyUnreliable_0_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyUnreliable_0[0])
			{
				writer.Put(_uv0);
			}
			if (_dirtyUnreliable_0[1])
			{
				writer.Put(_uv1);
			}
			if (_dirtyUnreliable_0[2])
			{
				writer.Put(_uv2);
			}
			if (_dirtyUnreliable_0[3])
			{
				writer.Put(_uv4);
			}
			if (_dirtyUnreliable_0[4])
			{
				writer.Put(_uv5);
			}
			if (_dirtyUnreliable_0[5])
			{
				_uv6.Serialize(writer);
			}
			if (_dirtyUnreliable_0[6])
			{
				writer.Put(_uv7);
			}
			if (_dirtyUnreliable_0[7])
			{
				int uf3Count = uf3Callstack.GetCallCount(player);
				if (uf3Count > 0)
				{
					var uf3callList = uf3Callstack.GetCallList(player);
					writer.Put((byte)uf3Count);
					for (int i = 0; i < uf3Count; i++)
					{
						var arg = uf3callList[i];
						writer.Put(arg);
					}
				}
				else
				{
					dirtyUnreliable_0[7] = false;
				}
			}
			if (dirtyUnreliable_0.AnyTrue())
			{
				writer.PutTo(dirtyUnreliable_0, dirtyUnreliable_0_pos);
			}
			else
			{
				writer.SetSize(dirtyUnreliable_0_pos);
			}
		}
		public override void SerializeEveryProperty(IPacketWriter writer)
		{
			_v0.Serialize(writer);
			_v1.Serialize(writer);
			writer.Put(_v2);
			writer.Put(_v4);
			writer.Put(_v5);
			writer.Put(_v6);
			writer.Put(_v7);
			writer.Put(_uv0);
			writer.Put(_uv1);
			writer.Put(_uv2);
			writer.Put(_uv4);
			writer.Put(_uv5);
			_uv6.Serialize(writer);
			writer.Put(_uv7);
		}
		public override void InitializeProperties()
		{
			_v0 = new();
			_v1 = new();
			_v2 = 0;
			_v4 = 0;
			_v5 = 0;
			_v6 = 0;
			_v7 = 0;
			_uv0 = 0;
			_uv1 = 0;
			_uv2 = 0;
			_uv4 = 0;
			_uv5 = 0;
			_uv6 = new();
			_uv7 = 0;
		}
		public override bool TryDeserializeSyncReliable(NetworkPlayer player, IPacketReader reader) => true;
		public override bool TryDeserializeSyncUnreliable(NetworkPlayer player, IPacketReader reader) => true;
		public override void IgnoreSyncReliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticReliable(IPacketReader reader) { }
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
