/*
 * Generated File : Master_ZTest_Value8
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using CT.Common.Gameplay;
using CT.Common.DataType;
using CT.Common.DataType.Synchronizations;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTS.Instance.Gameplay;
using CTS.Instance.Synchronizations;
using CTS.Instance.SyncObjects;

namespace CTS.Instance.SyncObjects
{
	[Serializable]
	public partial class ZTest_Value8
	{
		[SyncVar]
		private NetString _v0 = new();
		[SyncVar]
		private NetStringShort _v1 = new();
		[SyncVar]
		private byte _v2;
		[SyncVar]
		private TestEnumType _v4 = new();
		[SyncVar]
		private ushort _v5;
		[SyncObject]
		private SyncList<UserId> _v6 = new();
		[SyncObject]
		private ZTest_InnerObject _v7 = new();
		[SyncVar(SyncType.Unreliable)]
		private uint _uv0;
		[SyncVar(SyncType.Unreliable)]
		private ulong _uv2;
		[SyncVar(SyncType.Unreliable)]
		private float _uv4;
		[SyncObject]
		private SyncList<UserId> _uv6 = new();
		[SyncObject]
		private ZTest_InnerObject _uv7 = new();
		[SyncRpc]
		public partial void f3(int a);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf1(NetworkPlayer player, int a, byte b);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf3(NetworkPlayer player, int a, double b);
		[SyncRpc(SyncType.UnreliableTarget)]
		private partial void uf5(NetworkPlayer player);
		private BitmaskByte _dirtyReliable_0 = new();
		private BitmaskByte _dirtyReliable_1 = new();
		private BitmaskByte _dirtyUnreliable_0 = new();
		public override bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _v6.IsDirtyReliable;
				isDirty |= _v7.IsDirtyReliable;
				isDirty |= _uv6.IsDirtyReliable;
				isDirty |= _dirtyReliable_0.AnyTrue();
				isDirty |= _uv7.IsDirtyReliable;
				isDirty |= _dirtyReliable_1.AnyTrue();
				return isDirty;
			}
		}
		public override bool IsDirtyUnreliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _dirtyUnreliable_0.AnyTrue();
				return isDirty;
			}
		}
		public NetString V0
		{
			get => _v0;
			set
			{
				if (_v0 == value) return;
				_v0 = value;
				_dirtyReliable_0[0] = true;
			}
		}
		public NetStringShort V1
		{
			get => _v1;
			set
			{
				if (_v1 == value) return;
				_v1 = value;
				_dirtyReliable_0[1] = true;
			}
		}
		public byte V2
		{
			get => _v2;
			set
			{
				if (_v2 == value) return;
				_v2 = value;
				_dirtyReliable_0[2] = true;
			}
		}
		public TestEnumType V4
		{
			get => _v4;
			set
			{
				if (_v4 == value) return;
				_v4 = value;
				_dirtyReliable_0[3] = true;
			}
		}
		private ushort V5
		{
			get => _v5;
			set
			{
				if (_v5 == value) return;
				_v5 = value;
				_dirtyReliable_0[4] = true;
			}
		}
		public partial void f3(int a)
		{
			f3Callstack.Add(a);
			_dirtyReliable_1[1] = true;
		}
		private List<int> f3Callstack = new(4);
		public uint Uv0
		{
			get => _uv0;
			set
			{
				if (_uv0 == value) return;
				_uv0 = value;
				_dirtyUnreliable_0[0] = true;
			}
		}
		public ulong Uv2
		{
			get => _uv2;
			set
			{
				if (_uv2 == value) return;
				_uv2 = value;
				_dirtyUnreliable_0[1] = true;
			}
		}
		public float Uv4
		{
			get => _uv4;
			set
			{
				if (_uv4 == value) return;
				_uv4 = value;
				_dirtyUnreliable_0[2] = true;
			}
		}
		public partial void uf1(NetworkPlayer player, int a, byte b)
		{
			uf1Callstack.Add(player, (a, b));
			_dirtyUnreliable_0[3] = true;
		}
		private TargetCallstack<NetworkPlayer, (int a, byte b)> uf1Callstack = new(8);
		public partial void uf3(NetworkPlayer player, int a, double b)
		{
			uf3Callstack.Add(player, (a, b));
			_dirtyUnreliable_0[4] = true;
		}
		private TargetCallstack<NetworkPlayer, (int a, double b)> uf3Callstack = new(8);
		private partial void uf5(NetworkPlayer player)
		{
			uf5Callstack.Add(player);
			_dirtyUnreliable_0[5] = true;
		}
		private TargetVoidCallstack<NetworkPlayer> uf5Callstack = new(8);
		public override void ClearDirtyReliable()
		{
			_dirtyReliable_0.Clear();
			_v6.ClearDirtyReliable();
			_v7.ClearDirtyReliable();
			_uv6.ClearDirtyReliable();
			_dirtyReliable_1.Clear();
			_uv7.ClearDirtyReliable();
			f3Callstack.Clear();
		}
		public override void ClearDirtyUnreliable()
		{
			_dirtyUnreliable_0.Clear();
			uf1Callstack.Clear();
			uf3Callstack.Clear();
			uf5Callstack.Clear();
		}
		public override void SerializeSyncReliable(NetworkPlayer player, IPacketWriter writer)
		{
			int originSize = writer.Size;
			_dirtyReliable_0[5] = _v6.IsDirtyReliable;
			_dirtyReliable_0[6] = _v7.IsDirtyReliable;
			_dirtyReliable_0[7] = _uv6.IsDirtyReliable;
			BitmaskByte dirtyReliable_0 = _dirtyReliable_0;
			int dirtyReliable_0_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyReliable_0.AnyTrue())
			{
				if (_dirtyReliable_0[0])
				{
					_v0.Serialize(writer);
				}
				if (_dirtyReliable_0[1])
				{
					_v1.Serialize(writer);
				}
				if (_dirtyReliable_0[2])
				{
					writer.Put(_v2);
				}
				if (_dirtyReliable_0[3])
				{
					writer.Put((int)_v4);
				}
				if (_dirtyReliable_0[4])
				{
					writer.Put(_v5);
				}
				if (_dirtyReliable_0[5])
				{
					_v6.SerializeSyncReliable(writer);
				}
				if (_dirtyReliable_0[6])
				{
					int curSize = writer.Size;
					_v7.SerializeSyncReliable(player, writer);
					if (writer.Size == curSize)
					{
						dirtyReliable_0[6] = false;
					}
				}
				if (_dirtyReliable_0[7])
				{
					_uv6.SerializeSyncReliable(writer);
				}
			}
			writer.PutTo(dirtyReliable_0, dirtyReliable_0_pos);
			_dirtyReliable_1[0] = _uv7.IsDirtyReliable;
			BitmaskByte dirtyReliable_1 = _dirtyReliable_1;
			int dirtyReliable_1_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyReliable_1.AnyTrue())
			{
				if (_dirtyReliable_1[0])
				{
					int curSize = writer.Size;
					_uv7.SerializeSyncReliable(player, writer);
					if (writer.Size == curSize)
					{
						dirtyReliable_1[0] = false;
					}
				}
				if (_dirtyReliable_1[1])
				{
					byte count = (byte)f3Callstack.Count;
					writer.Put(count);
					for (int i = 0; i < count; i++)
					{
						var arg = f3Callstack[i];
						writer.Put(arg);
					}
				}
			}
			writer.PutTo(dirtyReliable_1, dirtyReliable_1_pos);
			if (writer.Size == originSize + 2)
			{
				writer.SetSize(originSize);
			}
		}
		public override void SerializeSyncUnreliable(NetworkPlayer player, IPacketWriter writer)
		{
			BitmaskByte dirtyUnreliable_0 = _dirtyUnreliable_0;
			int dirtyUnreliable_0_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyUnreliable_0[0])
			{
				writer.Put(_uv0);
			}
			if (_dirtyUnreliable_0[1])
			{
				writer.Put(_uv2);
			}
			if (_dirtyUnreliable_0[2])
			{
				writer.Put(_uv4);
			}
			if (_dirtyUnreliable_0[3])
			{
				int uf1Count = uf1Callstack.GetCallCount(player);
				if (uf1Count > 0)
				{
					var uf1callList = uf1Callstack.GetCallList(player);
					writer.Put((byte)uf1Count);
					for (int i = 0; i < uf1Count; i++)
					{
						var arg = uf1callList[i];
						writer.Put(arg.a);
						writer.Put(arg.b);
					}
				}
				else
				{
					dirtyUnreliable_0[3] = false;
				}
			}
			if (_dirtyUnreliable_0[4])
			{
				int uf3Count = uf3Callstack.GetCallCount(player);
				if (uf3Count > 0)
				{
					var uf3callList = uf3Callstack.GetCallList(player);
					writer.Put((byte)uf3Count);
					for (int i = 0; i < uf3Count; i++)
					{
						var arg = uf3callList[i];
						writer.Put(arg.a);
						writer.Put(arg.b);
					}
				}
				else
				{
					dirtyUnreliable_0[4] = false;
				}
			}
			if (_dirtyUnreliable_0[5])
			{
				int uf5Count = uf5Callstack.GetCallCount(player);
				if (uf5Count > 0)
				{
					writer.Put((byte)uf5Count);
				}
				else
				{
					dirtyUnreliable_0[5] = false;
				}
			}
			if (dirtyUnreliable_0.AnyTrue())
			{
				writer.PutTo(dirtyUnreliable_0, dirtyUnreliable_0_pos);
			}
			else
			{
				writer.SetSize(dirtyUnreliable_0_pos);
			}
		}
		public override void SerializeEveryProperty(IPacketWriter writer)
		{
			_v0.Serialize(writer);
			_v1.Serialize(writer);
			writer.Put(_v2);
			writer.Put((int)_v4);
			writer.Put(_v5);
			_v6.SerializeEveryProperty(writer);
			_v7.SerializeEveryProperty(writer);
			writer.Put(_uv0);
			writer.Put(_uv2);
			writer.Put(_uv4);
			_uv6.SerializeEveryProperty(writer);
			_uv7.SerializeEveryProperty(writer);
		}
		public override void InitializeMasterProperties()
		{
			_v0 = new();
			_v1 = new();
			_v2 = 0;
			_v4 = (TestEnumType)0;
			_v5 = 0;
			_v6.InitializeMasterProperties();
			_v7.InitializeMasterProperties();
			_uv0 = 0;
			_uv2 = 0;
			_uv4 = 0;
			_uv6.InitializeMasterProperties();
			_uv7.InitializeMasterProperties();
		}
		public override bool TryDeserializeSyncReliable(NetworkPlayer player, IPacketReader reader) => true;
		public override bool TryDeserializeSyncUnreliable(NetworkPlayer player, IPacketReader reader) => true;
		public override void InitializeRemoteProperties() { }
		public override void IgnoreSyncReliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticReliable(IPacketReader reader) { }
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
