/*
 * Generated File : Remote_ZTest_Value32
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
#if UNITY_2021
using UnityEngine;
#endif

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class ZTest_Value32
	{
		[SyncVar]
		public int V0;
		public event Action<int>? OnV0Changed;
		[SyncVar]
		public int V1;
		public event Action<int>? OnV1Changed;
		[SyncVar]
		public int V2;
		public event Action<int>? OnV2Changed;
		[SyncVar]
		public int V4;
		public event Action<int>? OnV4Changed;
		[SyncVar]
		public int V5;
		public event Action<int>? OnV5Changed;
		[SyncVar]
		public int V6;
		public event Action<int>? OnV6Changed;
		[SyncVar]
		public int V7;
		public event Action<int>? OnV7Changed;
		[SyncVar]
		private int _v8;
		public event Action<int>? OnV8Changed;
		[SyncVar]
		private int _v9;
		public event Action<int>? OnV9Changed;
		[SyncVar]
		private int _v10;
		public event Action<int>? OnV10Changed;
		[SyncVar]
		private int _v12;
		public event Action<int>? OnV12Changed;
		[SyncVar]
		private int _v13;
		public event Action<int>? OnV13Changed;
		[SyncVar]
		public int V15;
		public event Action<int>? OnV15Changed;
		[SyncVar]
		public int V16;
		public event Action<int>? OnV16Changed;
		[SyncVar]
		public int V18;
		public event Action<int>? OnV18Changed;
		[SyncVar]
		public int V19;
		public event Action<int>? OnV19Changed;
		[SyncVar]
		public int V20;
		public event Action<int>? OnV20Changed;
		[SyncVar]
		public int V21;
		public event Action<int>? OnV21Changed;
		[SyncVar]
		public int V23;
		public event Action<int>? OnV23Changed;
		[SyncVar]
		public int V25;
		public event Action<int>? OnV25Changed;
		[SyncVar]
		public int V26;
		public event Action<int>? OnV26Changed;
		[SyncVar]
		public int V27;
		public event Action<int>? OnV27Changed;
		[SyncVar]
		private int _v29;
		public event Action<int>? OnV29Changed;
		[SyncVar]
		private int _v30;
		public event Action<int>? OnV30Changed;
		[SyncVar]
		private int _v31;
		public event Action<int>? OnV31Changed;
		[SyncVar]
		private int _v32;
		public event Action<int>? OnV32Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv0;
		public event Action<int>? OnUv0Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv1;
		public event Action<int>? OnUv1Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv2;
		public event Action<int>? OnUv2Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv4;
		public event Action<int>? OnUv4Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv5;
		public event Action<int>? OnUv5Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv6;
		public event Action<int>? OnUv6Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv7;
		public event Action<int>? OnUv7Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv8;
		public event Action<int>? OnUv8Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv10;
		public event Action<int>? OnUv10Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv13;
		public event Action<int>? OnUv13Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv15;
		public event Action<int>? OnUv15Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv16;
		public event Action<int>? OnUv16Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv18;
		public event Action<int>? OnUv18Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv19;
		public event Action<int>? OnUv19Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv20;
		public event Action<int>? OnUv20Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv21;
		public event Action<int>? OnUv21Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv23;
		public event Action<int>? OnUv23Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv25;
		public event Action<int>? OnUv25Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv26;
		public event Action<int>? OnUv26Changed;
		[SyncVar(SyncType.Unreliable)]
		public int Uv27;
		public event Action<int>? OnUv27Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv29;
		public event Action<int>? OnUv29Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv30;
		public event Action<int>? OnUv30Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv31;
		public event Action<int>? OnUv31Changed;
		[SyncVar(SyncType.Unreliable)]
		private int _uv32;
		public event Action<int>? OnUv32Changed;
		[SyncRpc]
		public partial void f3(int a);
		[SyncRpc]
		public partial void f14();
		[SyncRpc]
		public partial void f17(int a);
		[SyncRpc]
		public partial void f22();
		[SyncRpc]
		public partial void f24(int a);
		[SyncRpc]
		private partial void f28(int a);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf3(int a);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf9();
		[SyncRpc(SyncType.Unreliable)]
		public partial void uf12(int a);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf14(int a, float b);
		[SyncRpc(SyncType.Unreliable)]
		private partial void uf17(int a);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf22(byte a, int b, uint c);
		[SyncRpc(SyncType.Unreliable)]
		public partial void uf24();
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uf28(int a);
		public override bool IsDirtyReliable => false;
		public override bool IsDirtyUnreliable => false;
		public override void ClearDirtyReliable() { }
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer) { }
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void SerializeEveryProperty(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
				if (dirtyReliable_0[0])
				{
					if (!reader.TryReadInt32(out V0)) return false;
					OnV0Changed?.Invoke(V0);
				}
				if (dirtyReliable_0[1])
				{
					if (!reader.TryReadInt32(out V1)) return false;
					OnV1Changed?.Invoke(V1);
				}
				if (dirtyReliable_0[2])
				{
					if (!reader.TryReadInt32(out V2)) return false;
					OnV2Changed?.Invoke(V2);
				}
				if (dirtyReliable_0[3])
				{
					if (!reader.TryReadInt32(out V4)) return false;
					OnV4Changed?.Invoke(V4);
				}
				if (dirtyReliable_0[4])
				{
					if (!reader.TryReadInt32(out V5)) return false;
					OnV5Changed?.Invoke(V5);
				}
				if (dirtyReliable_0[5])
				{
					if (!reader.TryReadInt32(out V6)) return false;
					OnV6Changed?.Invoke(V6);
				}
				if (dirtyReliable_0[6])
				{
					if (!reader.TryReadInt32(out V7)) return false;
					OnV7Changed?.Invoke(V7);
				}
				if (dirtyReliable_0[7])
				{
					if (!reader.TryReadInt32(out _v8)) return false;
					OnV8Changed?.Invoke(_v8);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
				if (dirtyReliable_1[0])
				{
					if (!reader.TryReadInt32(out _v9)) return false;
					OnV9Changed?.Invoke(_v9);
				}
				if (dirtyReliable_1[1])
				{
					if (!reader.TryReadInt32(out _v10)) return false;
					OnV10Changed?.Invoke(_v10);
				}
				if (dirtyReliable_1[2])
				{
					if (!reader.TryReadInt32(out _v12)) return false;
					OnV12Changed?.Invoke(_v12);
				}
				if (dirtyReliable_1[3])
				{
					if (!reader.TryReadInt32(out _v13)) return false;
					OnV13Changed?.Invoke(_v13);
				}
				if (dirtyReliable_1[4])
				{
					if (!reader.TryReadInt32(out V15)) return false;
					OnV15Changed?.Invoke(V15);
				}
				if (dirtyReliable_1[5])
				{
					if (!reader.TryReadInt32(out V16)) return false;
					OnV16Changed?.Invoke(V16);
				}
				if (dirtyReliable_1[6])
				{
					if (!reader.TryReadInt32(out V18)) return false;
					OnV18Changed?.Invoke(V18);
				}
				if (dirtyReliable_1[7])
				{
					if (!reader.TryReadInt32(out V19)) return false;
					OnV19Changed?.Invoke(V19);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyReliable_2 = reader.ReadBitmaskByte();
				if (dirtyReliable_2[0])
				{
					if (!reader.TryReadInt32(out V20)) return false;
					OnV20Changed?.Invoke(V20);
				}
				if (dirtyReliable_2[1])
				{
					if (!reader.TryReadInt32(out V21)) return false;
					OnV21Changed?.Invoke(V21);
				}
				if (dirtyReliable_2[2])
				{
					if (!reader.TryReadInt32(out V23)) return false;
					OnV23Changed?.Invoke(V23);
				}
				if (dirtyReliable_2[3])
				{
					if (!reader.TryReadInt32(out V25)) return false;
					OnV25Changed?.Invoke(V25);
				}
				if (dirtyReliable_2[4])
				{
					if (!reader.TryReadInt32(out V26)) return false;
					OnV26Changed?.Invoke(V26);
				}
				if (dirtyReliable_2[5])
				{
					if (!reader.TryReadInt32(out V27)) return false;
					OnV27Changed?.Invoke(V27);
				}
				if (dirtyReliable_2[6])
				{
					if (!reader.TryReadInt32(out _v29)) return false;
					OnV29Changed?.Invoke(_v29);
				}
				if (dirtyReliable_2[7])
				{
					if (!reader.TryReadInt32(out _v30)) return false;
					OnV30Changed?.Invoke(_v30);
				}
			}
			if (masterDirty[3])
			{
				BitmaskByte dirtyReliable_3 = reader.ReadBitmaskByte();
				if (dirtyReliable_3[0])
				{
					if (!reader.TryReadInt32(out _v31)) return false;
					OnV31Changed?.Invoke(_v31);
				}
				if (dirtyReliable_3[1])
				{
					if (!reader.TryReadInt32(out _v32)) return false;
					OnV32Changed?.Invoke(_v32);
				}
				if (dirtyReliable_3[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						f3(a);
					}
				}
				if (dirtyReliable_3[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						f14();
					}
				}
				if (dirtyReliable_3[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						f17(a);
					}
				}
				if (dirtyReliable_3[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						f22();
					}
				}
				if (dirtyReliable_3[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						f24(a);
					}
				}
				if (dirtyReliable_3[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						f28(a);
					}
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_0[0])
				{
					if (!reader.TryReadInt32(out Uv0)) return false;
					OnUv0Changed?.Invoke(Uv0);
				}
				if (dirtyUnreliable_0[1])
				{
					if (!reader.TryReadInt32(out Uv1)) return false;
					OnUv1Changed?.Invoke(Uv1);
				}
				if (dirtyUnreliable_0[2])
				{
					if (!reader.TryReadInt32(out Uv2)) return false;
					OnUv2Changed?.Invoke(Uv2);
				}
				if (dirtyUnreliable_0[3])
				{
					if (!reader.TryReadInt32(out Uv4)) return false;
					OnUv4Changed?.Invoke(Uv4);
				}
				if (dirtyUnreliable_0[4])
				{
					if (!reader.TryReadInt32(out Uv5)) return false;
					OnUv5Changed?.Invoke(Uv5);
				}
				if (dirtyUnreliable_0[5])
				{
					if (!reader.TryReadInt32(out Uv6)) return false;
					OnUv6Changed?.Invoke(Uv6);
				}
				if (dirtyUnreliable_0[6])
				{
					if (!reader.TryReadInt32(out Uv7)) return false;
					OnUv7Changed?.Invoke(Uv7);
				}
				if (dirtyUnreliable_0[7])
				{
					if (!reader.TryReadInt32(out Uv8)) return false;
					OnUv8Changed?.Invoke(Uv8);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyUnreliable_1 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_1[0])
				{
					if (!reader.TryReadInt32(out Uv10)) return false;
					OnUv10Changed?.Invoke(Uv10);
				}
				if (dirtyUnreliable_1[1])
				{
					if (!reader.TryReadInt32(out Uv13)) return false;
					OnUv13Changed?.Invoke(Uv13);
				}
				if (dirtyUnreliable_1[2])
				{
					if (!reader.TryReadInt32(out Uv15)) return false;
					OnUv15Changed?.Invoke(Uv15);
				}
				if (dirtyUnreliable_1[3])
				{
					if (!reader.TryReadInt32(out Uv16)) return false;
					OnUv16Changed?.Invoke(Uv16);
				}
				if (dirtyUnreliable_1[4])
				{
					if (!reader.TryReadInt32(out _uv18)) return false;
					OnUv18Changed?.Invoke(_uv18);
				}
				if (dirtyUnreliable_1[5])
				{
					if (!reader.TryReadInt32(out _uv19)) return false;
					OnUv19Changed?.Invoke(_uv19);
				}
				if (dirtyUnreliable_1[6])
				{
					if (!reader.TryReadInt32(out _uv20)) return false;
					OnUv20Changed?.Invoke(_uv20);
				}
				if (dirtyUnreliable_1[7])
				{
					if (!reader.TryReadInt32(out _uv21)) return false;
					OnUv21Changed?.Invoke(_uv21);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyUnreliable_2 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_2[0])
				{
					if (!reader.TryReadInt32(out Uv23)) return false;
					OnUv23Changed?.Invoke(Uv23);
				}
				if (dirtyUnreliable_2[1])
				{
					if (!reader.TryReadInt32(out Uv25)) return false;
					OnUv25Changed?.Invoke(Uv25);
				}
				if (dirtyUnreliable_2[2])
				{
					if (!reader.TryReadInt32(out Uv26)) return false;
					OnUv26Changed?.Invoke(Uv26);
				}
				if (dirtyUnreliable_2[3])
				{
					if (!reader.TryReadInt32(out Uv27)) return false;
					OnUv27Changed?.Invoke(Uv27);
				}
				if (dirtyUnreliable_2[4])
				{
					if (!reader.TryReadInt32(out _uv29)) return false;
					OnUv29Changed?.Invoke(_uv29);
				}
				if (dirtyUnreliable_2[5])
				{
					if (!reader.TryReadInt32(out _uv30)) return false;
					OnUv30Changed?.Invoke(_uv30);
				}
				if (dirtyUnreliable_2[6])
				{
					if (!reader.TryReadInt32(out _uv31)) return false;
					OnUv31Changed?.Invoke(_uv31);
				}
				if (dirtyUnreliable_2[7])
				{
					if (!reader.TryReadInt32(out _uv32)) return false;
					OnUv32Changed?.Invoke(_uv32);
				}
			}
			if (masterDirty[3])
			{
				BitmaskByte dirtyUnreliable_3 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_3[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						uf3(a);
					}
				}
				if (dirtyUnreliable_3[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						uf9();
					}
				}
				if (dirtyUnreliable_3[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						uf12(a);
					}
				}
				if (dirtyUnreliable_3[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						if (!reader.TryReadSingle(out float b)) return false;
						uf14(a, b);
					}
				}
				if (dirtyUnreliable_3[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						uf17(a);
					}
				}
				if (dirtyUnreliable_3[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadByte(out byte a)) return false;
						if (!reader.TryReadInt32(out int b)) return false;
						if (!reader.TryReadUInt32(out uint c)) return false;
						uf22(a, b, c);
					}
				}
				if (dirtyUnreliable_3[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						uf24();
					}
				}
				if (dirtyUnreliable_3[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int a)) return false;
						uf28(a);
					}
				}
			}
			return true;
		}
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!reader.TryReadInt32(out V0)) return false;
			OnV0Changed?.Invoke(V0);
			if (!reader.TryReadInt32(out V1)) return false;
			OnV1Changed?.Invoke(V1);
			if (!reader.TryReadInt32(out V2)) return false;
			OnV2Changed?.Invoke(V2);
			if (!reader.TryReadInt32(out V4)) return false;
			OnV4Changed?.Invoke(V4);
			if (!reader.TryReadInt32(out V5)) return false;
			OnV5Changed?.Invoke(V5);
			if (!reader.TryReadInt32(out V6)) return false;
			OnV6Changed?.Invoke(V6);
			if (!reader.TryReadInt32(out V7)) return false;
			OnV7Changed?.Invoke(V7);
			if (!reader.TryReadInt32(out _v8)) return false;
			OnV8Changed?.Invoke(_v8);
			if (!reader.TryReadInt32(out _v9)) return false;
			OnV9Changed?.Invoke(_v9);
			if (!reader.TryReadInt32(out _v10)) return false;
			OnV10Changed?.Invoke(_v10);
			if (!reader.TryReadInt32(out _v12)) return false;
			OnV12Changed?.Invoke(_v12);
			if (!reader.TryReadInt32(out _v13)) return false;
			OnV13Changed?.Invoke(_v13);
			if (!reader.TryReadInt32(out V15)) return false;
			OnV15Changed?.Invoke(V15);
			if (!reader.TryReadInt32(out V16)) return false;
			OnV16Changed?.Invoke(V16);
			if (!reader.TryReadInt32(out V18)) return false;
			OnV18Changed?.Invoke(V18);
			if (!reader.TryReadInt32(out V19)) return false;
			OnV19Changed?.Invoke(V19);
			if (!reader.TryReadInt32(out V20)) return false;
			OnV20Changed?.Invoke(V20);
			if (!reader.TryReadInt32(out V21)) return false;
			OnV21Changed?.Invoke(V21);
			if (!reader.TryReadInt32(out V23)) return false;
			OnV23Changed?.Invoke(V23);
			if (!reader.TryReadInt32(out V25)) return false;
			OnV25Changed?.Invoke(V25);
			if (!reader.TryReadInt32(out V26)) return false;
			OnV26Changed?.Invoke(V26);
			if (!reader.TryReadInt32(out V27)) return false;
			OnV27Changed?.Invoke(V27);
			if (!reader.TryReadInt32(out _v29)) return false;
			OnV29Changed?.Invoke(_v29);
			if (!reader.TryReadInt32(out _v30)) return false;
			OnV30Changed?.Invoke(_v30);
			if (!reader.TryReadInt32(out _v31)) return false;
			OnV31Changed?.Invoke(_v31);
			if (!reader.TryReadInt32(out _v32)) return false;
			OnV32Changed?.Invoke(_v32);
			if (!reader.TryReadInt32(out Uv0)) return false;
			OnUv0Changed?.Invoke(Uv0);
			if (!reader.TryReadInt32(out Uv1)) return false;
			OnUv1Changed?.Invoke(Uv1);
			if (!reader.TryReadInt32(out Uv2)) return false;
			OnUv2Changed?.Invoke(Uv2);
			if (!reader.TryReadInt32(out Uv4)) return false;
			OnUv4Changed?.Invoke(Uv4);
			if (!reader.TryReadInt32(out Uv5)) return false;
			OnUv5Changed?.Invoke(Uv5);
			if (!reader.TryReadInt32(out Uv6)) return false;
			OnUv6Changed?.Invoke(Uv6);
			if (!reader.TryReadInt32(out Uv7)) return false;
			OnUv7Changed?.Invoke(Uv7);
			if (!reader.TryReadInt32(out Uv8)) return false;
			OnUv8Changed?.Invoke(Uv8);
			if (!reader.TryReadInt32(out Uv10)) return false;
			OnUv10Changed?.Invoke(Uv10);
			if (!reader.TryReadInt32(out Uv13)) return false;
			OnUv13Changed?.Invoke(Uv13);
			if (!reader.TryReadInt32(out Uv15)) return false;
			OnUv15Changed?.Invoke(Uv15);
			if (!reader.TryReadInt32(out Uv16)) return false;
			OnUv16Changed?.Invoke(Uv16);
			if (!reader.TryReadInt32(out _uv18)) return false;
			OnUv18Changed?.Invoke(_uv18);
			if (!reader.TryReadInt32(out _uv19)) return false;
			OnUv19Changed?.Invoke(_uv19);
			if (!reader.TryReadInt32(out _uv20)) return false;
			OnUv20Changed?.Invoke(_uv20);
			if (!reader.TryReadInt32(out _uv21)) return false;
			OnUv21Changed?.Invoke(_uv21);
			if (!reader.TryReadInt32(out Uv23)) return false;
			OnUv23Changed?.Invoke(Uv23);
			if (!reader.TryReadInt32(out Uv25)) return false;
			OnUv25Changed?.Invoke(Uv25);
			if (!reader.TryReadInt32(out Uv26)) return false;
			OnUv26Changed?.Invoke(Uv26);
			if (!reader.TryReadInt32(out Uv27)) return false;
			OnUv27Changed?.Invoke(Uv27);
			if (!reader.TryReadInt32(out _uv29)) return false;
			OnUv29Changed?.Invoke(_uv29);
			if (!reader.TryReadInt32(out _uv30)) return false;
			OnUv30Changed?.Invoke(_uv30);
			if (!reader.TryReadInt32(out _uv31)) return false;
			OnUv31Changed?.Invoke(_uv31);
			if (!reader.TryReadInt32(out _uv32)) return false;
			OnUv32Changed?.Invoke(_uv32);
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			V0 = 0;
			V1 = 0;
			V2 = 0;
			V4 = 0;
			V5 = 0;
			V6 = 0;
			V7 = 0;
			_v8 = 0;
			_v9 = 0;
			_v10 = 0;
			_v12 = 0;
			_v13 = 0;
			V15 = 0;
			V16 = 0;
			V18 = 0;
			V19 = 0;
			V20 = 0;
			V21 = 0;
			V23 = 0;
			V25 = 0;
			V26 = 0;
			V27 = 0;
			_v29 = 0;
			_v30 = 0;
			_v31 = 0;
			_v32 = 0;
			Uv0 = 0;
			Uv1 = 0;
			Uv2 = 0;
			Uv4 = 0;
			Uv5 = 0;
			Uv6 = 0;
			Uv7 = 0;
			Uv8 = 0;
			Uv10 = 0;
			Uv13 = 0;
			Uv15 = 0;
			Uv16 = 0;
			_uv18 = 0;
			_uv19 = 0;
			_uv20 = 0;
			_uv21 = 0;
			Uv23 = 0;
			Uv25 = 0;
			Uv26 = 0;
			Uv27 = 0;
			_uv29 = 0;
			_uv30 = 0;
			_uv31 = 0;
			_uv32 = 0;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
				if (dirtyReliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
				if (dirtyReliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyReliable_2 = reader.ReadBitmaskByte();
				if (dirtyReliable_2[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[3])
			{
				BitmaskByte dirtyReliable_3 = reader.ReadBitmaskByte();
				if (dirtyReliable_3[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_3[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_3[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_3[3])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_3[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_3[5])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_3[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_3[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
				if (dirtyReliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
				if (dirtyReliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyReliable_2 = reader.ReadBitmaskByte();
				if (dirtyReliable_2[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_2[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[3])
			{
				BitmaskByte dirtyReliable_3 = reader.ReadBitmaskByte();
				if (dirtyReliable_3[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_3[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_3[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_3[3])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_3[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_3[5])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_3[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_3[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[6])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyUnreliable_1 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[3])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[4])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[5])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[6])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyUnreliable_2 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_2[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[1])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[3])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[4])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[5])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[6])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[3])
			{
				BitmaskByte dirtyUnreliable_3 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_3[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_3[1])
				{
					reader.Ignore(1);
				}
				if (dirtyUnreliable_3[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_3[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_3[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_3[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_3[6])
				{
					reader.Ignore(1);
				}
				if (dirtyUnreliable_3[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
			}
		}
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[6])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyUnreliable_1 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[3])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[4])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[5])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[6])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_1[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyUnreliable_2 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_2[0])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[1])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[2])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[3])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[4])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[5])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[6])
				{
					reader.Ignore(4);
				}
				if (dirtyUnreliable_2[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[3])
			{
				BitmaskByte dirtyUnreliable_3 = reader.ReadBitmaskByte();
				if (dirtyUnreliable_3[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_3[1])
				{
					reader.Ignore(1);
				}
				if (dirtyUnreliable_3[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_3[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_3[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_3[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyUnreliable_3[6])
				{
					reader.Ignore(1);
				}
				if (dirtyUnreliable_3[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
			}
		}
	}
}
#pragma warning restore CS0649
