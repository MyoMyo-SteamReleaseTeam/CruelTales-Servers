/*
 * Generated File : Master_ZTest_Value8Target
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using CT.Common.Gameplay;
using CT.Common.DataType;
using CT.Common.DataType.Synchronizations;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTS.Instance.Gameplay;
using CTS.Instance.Synchronizations;
using CTS.Instance.SyncObjects;

namespace CTS.Instance.SyncObjects
{
	[Serializable]
	public partial class ZTest_Value8Target
	{
		[SyncVar]
		private NetString _v0 = new();
		[SyncVar]
		private NetStringShort _v1 = new();
		[SyncVar]
		private TestEnumType _v2 = new();
		[SyncVar]
		private int _v3;
		[SyncObject]
		private SyncList<UserId> _v4 = new();
		[SyncObject(SyncType.ReliableOrUnreliable)]
		private ZTest_InnerObjectTarget _v5 = new();
		[SyncVar(SyncType.Unreliable)]
		private int _uv0;
		[SyncVar(SyncType.Unreliable)]
		private int _uv1;
		[SyncVar(SyncType.Unreliable)]
		private int _uv2;
		[SyncVar(SyncType.Unreliable)]
		private int _uv3;
		[SyncRpc(SyncType.ReliableTarget)]
		public partial void ft0(NetworkPlayer player, NetString v0, NetStringShort v1, TestEnumType v2, int v3);
		[SyncRpc]
		public partial void f1();
		[SyncRpc(SyncType.Unreliable)]
		public partial void uf0(int a, byte b);
		[SyncRpc(SyncType.Unreliable)]
		public partial void uf1(int a, double b);
		[SyncRpc(SyncType.UnreliableTarget)]
		public partial void uft2(NetworkPlayer player);
		private BitmaskByte _dirtyReliable_0 = new();
		private BitmaskByte _dirtyUnreliable_0 = new();
		public override bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _v4.IsDirtyReliable;
				isDirty |= _v5.IsDirtyReliable;
				isDirty |= _dirtyReliable_0.AnyTrue();
				return isDirty;
			}
		}
		public override bool IsDirtyUnreliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _v5.IsDirtyUnreliable;
				isDirty |= _dirtyUnreliable_0.AnyTrue();
				return isDirty;
			}
		}
		public NetString V0
		{
			get => _v0;
			set
			{
				if (_v0 == value) return;
				_v0 = value;
				_dirtyReliable_0[0] = true;
			}
		}
		public NetStringShort V1
		{
			get => _v1;
			set
			{
				if (_v1 == value) return;
				_v1 = value;
				_dirtyReliable_0[1] = true;
			}
		}
		public TestEnumType V2
		{
			get => _v2;
			set
			{
				if (_v2 == value) return;
				_v2 = value;
				_dirtyReliable_0[2] = true;
			}
		}
		public int V3
		{
			get => _v3;
			set
			{
				if (_v3 == value) return;
				_v3 = value;
				_dirtyReliable_0[3] = true;
			}
		}
		public partial void ft0(NetworkPlayer player, NetString v0, NetStringShort v1, TestEnumType v2, int v3)
		{
			ft0Callstack.Add(player, (v0, v1, v2, v3));
			_dirtyReliable_0[6] = true;
		}
		private TargetCallstack<NetworkPlayer, (NetString v0, NetStringShort v1, TestEnumType v2, int v3)> ft0Callstack = new(8);
		public partial void f1()
		{
			f1CallstackCount++;
			_dirtyReliable_0[7] = true;
		}
		private byte f1CallstackCount = 0;
		public int Uv0
		{
			get => _uv0;
			set
			{
				if (_uv0 == value) return;
				_uv0 = value;
				_dirtyUnreliable_0[1] = true;
			}
		}
		public int Uv1
		{
			get => _uv1;
			set
			{
				if (_uv1 == value) return;
				_uv1 = value;
				_dirtyUnreliable_0[2] = true;
			}
		}
		public int Uv2
		{
			get => _uv2;
			set
			{
				if (_uv2 == value) return;
				_uv2 = value;
				_dirtyUnreliable_0[3] = true;
			}
		}
		public int Uv3
		{
			get => _uv3;
			set
			{
				if (_uv3 == value) return;
				_uv3 = value;
				_dirtyUnreliable_0[4] = true;
			}
		}
		public partial void uf0(int a, byte b)
		{
			uf0Callstack.Add((a, b));
			_dirtyUnreliable_0[5] = true;
		}
		private List<(int a, byte b)> uf0Callstack = new(4);
		public partial void uf1(int a, double b)
		{
			uf1Callstack.Add((a, b));
			_dirtyUnreliable_0[6] = true;
		}
		private List<(int a, double b)> uf1Callstack = new(4);
		public partial void uft2(NetworkPlayer player)
		{
			uft2Callstack.Add(player);
			_dirtyUnreliable_0[7] = true;
		}
		private TargetVoidCallstack<NetworkPlayer> uft2Callstack = new(8);
		public override void ClearDirtyReliable()
		{
			_dirtyReliable_0.Clear();
			_v4.ClearDirtyReliable();
			_v5.ClearDirtyReliable();
			ft0Callstack.Clear();
			f1CallstackCount = 0;
		}
		public override void ClearDirtyUnreliable()
		{
			_dirtyUnreliable_0.Clear();
			_v5.ClearDirtyUnreliable();
			uf0Callstack.Clear();
			uf1Callstack.Clear();
			uft2Callstack.Clear();
		}
		public override void SerializeSyncReliable(NetworkPlayer player, IPacketWriter writer)
		{
			_dirtyReliable_0[4] = _v4.IsDirtyReliable;
			_dirtyReliable_0[5] = _v5.IsDirtyReliable;
			BitmaskByte dirtyReliable_0 = _dirtyReliable_0;
			int dirtyReliable_0_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyReliable_0[0])
			{
				_v0.Serialize(writer);
			}
			if (_dirtyReliable_0[1])
			{
				_v1.Serialize(writer);
			}
			if (_dirtyReliable_0[2])
			{
				writer.Put((int)_v2);
			}
			if (_dirtyReliable_0[3])
			{
				writer.Put(_v3);
			}
			if (_dirtyReliable_0[4])
			{
				_v4.SerializeSyncReliable(writer);
			}
			if (_dirtyReliable_0[5])
			{
				int curSize = writer.Size;
				_v5.SerializeSyncReliable(player, writer);
				if (writer.Size == curSize)
				{
					dirtyReliable_0[5] = false;
				}
			}
			if (_dirtyReliable_0[6])
			{
				int ft0Count = ft0Callstack.GetCallCount(player);
				if (ft0Count > 0)
				{
					var ft0callList = ft0Callstack.GetCallList(player);
					writer.Put((byte)ft0Count);
					for (int i = 0; i < ft0Count; i++)
					{
						var arg = ft0callList[i];
						arg.v0.Serialize(writer);
						arg.v1.Serialize(writer);
						writer.Put((int)arg.v2);
						writer.Put(arg.v3);
					}
				}
				else
				{
					dirtyReliable_0[6] = false;
				}
			}
			if (_dirtyReliable_0[7])
			{
				writer.Put((byte)f1CallstackCount);
			}
			if (dirtyReliable_0.AnyTrue())
			{
				writer.PutTo(dirtyReliable_0, dirtyReliable_0_pos);
			}
			else
			{
				writer.SetSize(dirtyReliable_0_pos);
			}
		}
		public override void SerializeSyncUnreliable(NetworkPlayer player, IPacketWriter writer)
		{
			_dirtyUnreliable_0[0] = _v5.IsDirtyUnreliable;
			BitmaskByte dirtyUnreliable_0 = _dirtyUnreliable_0;
			int dirtyUnreliable_0_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyUnreliable_0[0])
			{
				int curSize = writer.Size;
				_v5.SerializeSyncUnreliable(player, writer);
				if (writer.Size == curSize)
				{
					dirtyUnreliable_0[0] = false;
				}
			}
			if (_dirtyUnreliable_0[1])
			{
				writer.Put(_uv0);
			}
			if (_dirtyUnreliable_0[2])
			{
				writer.Put(_uv1);
			}
			if (_dirtyUnreliable_0[3])
			{
				writer.Put(_uv2);
			}
			if (_dirtyUnreliable_0[4])
			{
				writer.Put(_uv3);
			}
			if (_dirtyUnreliable_0[5])
			{
				byte count = (byte)uf0Callstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = uf0Callstack[i];
					writer.Put(arg.a);
					writer.Put(arg.b);
				}
			}
			if (_dirtyUnreliable_0[6])
			{
				byte count = (byte)uf1Callstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = uf1Callstack[i];
					writer.Put(arg.a);
					writer.Put(arg.b);
				}
			}
			if (_dirtyUnreliable_0[7])
			{
				int uft2Count = uft2Callstack.GetCallCount(player);
				if (uft2Count > 0)
				{
					writer.Put((byte)uft2Count);
				}
				else
				{
					dirtyUnreliable_0[7] = false;
				}
			}
			if (dirtyUnreliable_0.AnyTrue())
			{
				writer.PutTo(dirtyUnreliable_0, dirtyUnreliable_0_pos);
			}
			else
			{
				writer.SetSize(dirtyUnreliable_0_pos);
			}
		}
		public override void SerializeEveryProperty(IPacketWriter writer)
		{
			_v0.Serialize(writer);
			_v1.Serialize(writer);
			writer.Put((int)_v2);
			writer.Put(_v3);
			_v4.SerializeEveryProperty(writer);
			_v5.SerializeEveryProperty(writer);
			writer.Put(_uv0);
			writer.Put(_uv1);
			writer.Put(_uv2);
			writer.Put(_uv3);
		}
		public override void InitializeMasterProperties()
		{
			_v0 = new();
			_v1 = new();
			_v2 = (TestEnumType)0;
			_v3 = 0;
			_v4.InitializeMasterProperties();
			_v5.InitializeMasterProperties();
			_uv0 = 0;
			_uv1 = 0;
			_uv2 = 0;
			_uv3 = 0;
		}
		public override bool TryDeserializeSyncReliable(NetworkPlayer player, IPacketReader reader) => true;
		public override bool TryDeserializeSyncUnreliable(NetworkPlayer player, IPacketReader reader) => true;
		public override void InitializeRemoteProperties() { }
		public override void IgnoreSyncReliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticReliable(IPacketReader reader) { }
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
