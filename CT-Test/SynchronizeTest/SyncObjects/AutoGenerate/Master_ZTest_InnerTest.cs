/*
 * Generated File : Master_ZTest_InnerTest
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTS.Instance.Gameplay;
using CTS.Instance.Synchronizations;
using CTS.Instance.SyncObjects;

namespace CTS.Instance.SyncObjects
{
	[Serializable]
	public partial class ZTest_InnerTest : IMasterSynchronizable
	{
		[SyncVar]
		private int _a;
		[SyncVar]
		private float _b;
		[SyncRpc]
		public partial void Server_Test();
		[SyncRpc(SyncType.ReliableTarget)]
		public partial void Server_TestTarget(NetworkPlayer player);
		[SyncVar(dir: SyncDirection.FromRemote)]
		private float _c;
		public float C => _c;
		private Action<float>? _onCChanged;
		public event Action<float> OnCChanged
		{
			add => _onCChanged += value;
			remove => _onCChanged -= value;
		}
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_Test(NetworkPlayer player);
		private BitmaskByte _dirtyReliable_0 = new();
		public bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _dirtyReliable_0.AnyTrue();
				return isDirty;
			}
		}
		public bool IsDirtyUnreliable => false;
		public int A
		{
			get => _a;
			set
			{
				if (_a == value) return;
				_a = value;
				_dirtyReliable_0[0] = true;
			}
		}
		public float B
		{
			get => _b;
			set
			{
				if (_b == value) return;
				_b = value;
				_dirtyReliable_0[1] = true;
			}
		}
		public partial void Server_Test()
		{
			Server_TestCallstackCount++;
			_dirtyReliable_0[2] = true;
		}
		private byte Server_TestCallstackCount = 0;
		public partial void Server_TestTarget(NetworkPlayer player)
		{
			Server_TestTargetCallstack.Add(player);
			_dirtyReliable_0[3] = true;
		}
		private TargetVoidCallstack<NetworkPlayer> Server_TestTargetCallstack = new(8);
		public void ClearDirtyReliable()
		{
			_dirtyReliable_0.Clear();
			Server_TestCallstackCount = 0;
			Server_TestTargetCallstack.Clear();
		}
		public void ClearDirtyUnreliable() { }
		public void SerializeSyncReliable(NetworkPlayer player, IPacketWriter writer)
		{
			BitmaskByte dirtyReliable_0 = _dirtyReliable_0;
			int dirtyReliable_0_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyReliable_0[0])
			{
				writer.Put(_a);
			}
			if (_dirtyReliable_0[1])
			{
				writer.Put(_b);
			}
			if (_dirtyReliable_0[2])
			{
				writer.Put((byte)Server_TestCallstackCount);
			}
			if (_dirtyReliable_0[3])
			{
				int Server_TestTargetCount = Server_TestTargetCallstack.GetCallCount(player);
				if (Server_TestTargetCount > 0)
				{
					writer.Put((byte)Server_TestTargetCount);
				}
				else
				{
					dirtyReliable_0[3] = false;
				}
			}
			if (dirtyReliable_0.AnyTrue())
			{
				writer.PutTo(dirtyReliable_0, dirtyReliable_0_pos);
			}
			else
			{
				writer.SetSize(dirtyReliable_0_pos);
			}
		}
		public void SerializeSyncUnreliable(NetworkPlayer player, IPacketWriter writer) { }
		public void SerializeEveryProperty(IPacketWriter writer)
		{
			writer.Put(_a);
			writer.Put(_b);
		}
		public void InitializeMasterProperties()
		{
			_a = 0;
			_b = 0;
		}
		public bool TryDeserializeSyncReliable(NetworkPlayer player, IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!reader.TryReadSingle(out _c)) return false;
				_onCChanged?.Invoke(_c);
			}
			if (dirtyReliable_0[1])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Client_Test(player);
				}
			}
			return true;
		}
		public bool TryDeserializeSyncUnreliable(NetworkPlayer player, IPacketReader reader) => true;
		public void InitializeRemoteProperties()
		{
			_c = 0;
		}
		public void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[1])
			{
				reader.Ignore(1);
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[1])
			{
				reader.Ignore(1);
			}
		}
		public void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
