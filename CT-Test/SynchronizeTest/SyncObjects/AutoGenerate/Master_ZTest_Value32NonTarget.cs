/*
 * Generated File : Master_ZTest_Value32NonTarget
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using CT.Common.Gameplay;
using CT.Common.DataType;
using CT.Common.DataType.Synchronizations;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTS.Instance.Gameplay;
using CTS.Instance.Synchronizations;
using CTS.Instance.SyncObjects;

namespace CTS.Instance.SyncObjects
{
	[Serializable]
	public partial class ZTest_Value32NonTarget
	{
		[SyncVar]
		private int _v0;
		[SyncVar]
		private int _v1;
		[SyncVar]
		private int _v2;
		[SyncVar]
		private int _v3;
		[SyncVar]
		private int _v4;
		[SyncVar]
		private int _v5;
		[SyncVar]
		private int _v6;
		[SyncObject]
		private SyncList<UserId> _v7 = new();
		[SyncVar]
		private int _v8;
		[SyncVar]
		private int _v9;
		[SyncVar]
		private int _v10;
		[SyncVar]
		private int _v11;
		[SyncVar]
		private int _v12;
		[SyncVar]
		private int _v13;
		[SyncObject(SyncType.ReliableOrUnreliable)]
		private ZTest_InnerObject _v15 = new();
		[SyncVar]
		private int _v16;
		[SyncVar]
		private int _v17;
		[SyncVar]
		private int _v18;
		[SyncVar]
		private int _v20;
		[SyncVar]
		private int _v21;
		[SyncObject]
		private SyncList<UserId> _v23 = new();
		[SyncRpc(SyncType.ReliableTarget)]
		public partial void ft15(NetworkPlayer player);
		[SyncRpc]
		public partial void f22();
		private BitmaskByte _dirtyReliable_0 = new();
		private BitmaskByte _dirtyReliable_1 = new();
		private BitmaskByte _dirtyReliable_2 = new();
		private BitmaskByte _dirtyUnreliable_0 = new();
		public override bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _v7.IsDirtyReliable;
				isDirty |= _dirtyReliable_0.AnyTrue();
				isDirty |= _v15.IsDirtyReliable;
				isDirty |= _dirtyReliable_1.AnyTrue();
				isDirty |= _v23.IsDirtyReliable;
				isDirty |= _dirtyReliable_2.AnyTrue();
				return isDirty;
			}
		}
		public override bool IsDirtyUnreliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _v15.IsDirtyUnreliable;
				isDirty |= _dirtyUnreliable_0.AnyTrue();
				return isDirty;
			}
		}
		public int V0
		{
			get => _v0;
			set
			{
				if (_v0 == value) return;
				_v0 = value;
				_dirtyReliable_0[0] = true;
			}
		}
		public int V1
		{
			get => _v1;
			set
			{
				if (_v1 == value) return;
				_v1 = value;
				_dirtyReliable_0[1] = true;
			}
		}
		public int V2
		{
			get => _v2;
			set
			{
				if (_v2 == value) return;
				_v2 = value;
				_dirtyReliable_0[2] = true;
			}
		}
		public int V3
		{
			get => _v3;
			set
			{
				if (_v3 == value) return;
				_v3 = value;
				_dirtyReliable_0[3] = true;
			}
		}
		public int V4
		{
			get => _v4;
			set
			{
				if (_v4 == value) return;
				_v4 = value;
				_dirtyReliable_0[4] = true;
			}
		}
		public int V5
		{
			get => _v5;
			set
			{
				if (_v5 == value) return;
				_v5 = value;
				_dirtyReliable_0[5] = true;
			}
		}
		public int V6
		{
			get => _v6;
			set
			{
				if (_v6 == value) return;
				_v6 = value;
				_dirtyReliable_0[6] = true;
			}
		}
		private int V8
		{
			get => _v8;
			set
			{
				if (_v8 == value) return;
				_v8 = value;
				_dirtyReliable_1[0] = true;
			}
		}
		private int V9
		{
			get => _v9;
			set
			{
				if (_v9 == value) return;
				_v9 = value;
				_dirtyReliable_1[1] = true;
			}
		}
		private int V10
		{
			get => _v10;
			set
			{
				if (_v10 == value) return;
				_v10 = value;
				_dirtyReliable_1[2] = true;
			}
		}
		private int V11
		{
			get => _v11;
			set
			{
				if (_v11 == value) return;
				_v11 = value;
				_dirtyReliable_1[3] = true;
			}
		}
		private int V12
		{
			get => _v12;
			set
			{
				if (_v12 == value) return;
				_v12 = value;
				_dirtyReliable_1[4] = true;
			}
		}
		private int V13
		{
			get => _v13;
			set
			{
				if (_v13 == value) return;
				_v13 = value;
				_dirtyReliable_1[5] = true;
			}
		}
		public int V16
		{
			get => _v16;
			set
			{
				if (_v16 == value) return;
				_v16 = value;
				_dirtyReliable_1[7] = true;
			}
		}
		public int V17
		{
			get => _v17;
			set
			{
				if (_v17 == value) return;
				_v17 = value;
				_dirtyReliable_2[0] = true;
			}
		}
		public int V18
		{
			get => _v18;
			set
			{
				if (_v18 == value) return;
				_v18 = value;
				_dirtyReliable_2[1] = true;
			}
		}
		public int V20
		{
			get => _v20;
			set
			{
				if (_v20 == value) return;
				_v20 = value;
				_dirtyReliable_2[2] = true;
			}
		}
		public int V21
		{
			get => _v21;
			set
			{
				if (_v21 == value) return;
				_v21 = value;
				_dirtyReliable_2[3] = true;
			}
		}
		public partial void ft15(NetworkPlayer player)
		{
			ft15Callstack.Add(player);
			_dirtyReliable_2[5] = true;
		}
		private TargetVoidCallstack<NetworkPlayer> ft15Callstack = new(8);
		public partial void f22()
		{
			f22CallstackCount++;
			_dirtyReliable_2[6] = true;
		}
		private byte f22CallstackCount = 0;
		public override void ClearDirtyReliable()
		{
			_dirtyReliable_0.Clear();
			_v7.ClearDirtyReliable();
			_dirtyReliable_1.Clear();
			_v15.ClearDirtyReliable();
			_dirtyReliable_2.Clear();
			_v23.ClearDirtyReliable();
			ft15Callstack.Clear();
			f22CallstackCount = 0;
		}
		public override void ClearDirtyUnreliable()
		{
			_dirtyUnreliable_0.Clear();
			_v15.ClearDirtyUnreliable();
		}
		public override void SerializeSyncReliable(NetworkPlayer player, IPacketWriter writer)
		{
			BitmaskByte masterDirty = new BitmaskByte();
			_dirtyReliable_0[7] = _v7.IsDirtyReliable;
			masterDirty[0] = _dirtyReliable_0.AnyTrue();
			_dirtyReliable_1[6] = _v15.IsDirtyReliable;
			masterDirty[1] = _dirtyReliable_1.AnyTrue();
			_dirtyReliable_2[4] = _v23.IsDirtyReliable;
			masterDirty[2] = _dirtyReliable_2.AnyTrue();
			int masterDirty_pos = writer.OffsetSize(sizeof(byte));
			if (masterDirty[0])
			{
				_dirtyReliable_0.Serialize(writer);
				if (_dirtyReliable_0[0])
				{
					writer.Put(_v0);
				}
				if (_dirtyReliable_0[1])
				{
					writer.Put(_v1);
				}
				if (_dirtyReliable_0[2])
				{
					writer.Put(_v2);
				}
				if (_dirtyReliable_0[3])
				{
					writer.Put(_v3);
				}
				if (_dirtyReliable_0[4])
				{
					writer.Put(_v4);
				}
				if (_dirtyReliable_0[5])
				{
					writer.Put(_v5);
				}
				if (_dirtyReliable_0[6])
				{
					writer.Put(_v6);
				}
				if (_dirtyReliable_0[7])
				{
					_v7.SerializeSyncReliable(writer);
				}
			}
			if (masterDirty[1])
			{
				_dirtyReliable_1.Serialize(writer);
				if (_dirtyReliable_1[0])
				{
					writer.Put(_v8);
				}
				if (_dirtyReliable_1[1])
				{
					writer.Put(_v9);
				}
				if (_dirtyReliable_1[2])
				{
					writer.Put(_v10);
				}
				if (_dirtyReliable_1[3])
				{
					writer.Put(_v11);
				}
				if (_dirtyReliable_1[4])
				{
					writer.Put(_v12);
				}
				if (_dirtyReliable_1[5])
				{
					writer.Put(_v13);
				}
				if (_dirtyReliable_1[6])
				{
					_v15.SerializeSyncReliable(player, writer);
				}
				if (_dirtyReliable_1[7])
				{
					writer.Put(_v16);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyReliable_2 = _dirtyReliable_2;
				int dirtyReliable_2_pos = writer.OffsetSize(sizeof(byte));
				if (_dirtyReliable_2[0])
				{
					writer.Put(_v17);
				}
				if (_dirtyReliable_2[1])
				{
					writer.Put(_v18);
				}
				if (_dirtyReliable_2[2])
				{
					writer.Put(_v20);
				}
				if (_dirtyReliable_2[3])
				{
					writer.Put(_v21);
				}
				if (_dirtyReliable_2[4])
				{
					_v23.SerializeSyncReliable(writer);
				}
				if (_dirtyReliable_2[5])
				{
					int ft15Count = ft15Callstack.GetCallCount(player);
					if (ft15Count > 0)
					{
						writer.Put((byte)ft15Count);
					}
					else
					{
						dirtyReliable_2[5] = false;
					}
				}
				if (_dirtyReliable_2[6])
				{
					writer.Put((byte)f22CallstackCount);
				}
				if (dirtyReliable_2.AnyTrue())
				{
					writer.PutTo(dirtyReliable_2, dirtyReliable_2_pos);
				}
				else
				{
					writer.SetSize(dirtyReliable_2_pos);
					masterDirty[2] = false;
				}
			}
			if (masterDirty.AnyTrue())
			{
				writer.PutTo(masterDirty, masterDirty_pos);
			}
			else
			{
				writer.SetSize(masterDirty_pos);
			}
		}
		public override void SerializeSyncUnreliable(NetworkPlayer player, IPacketWriter writer)
		{
			_dirtyUnreliable_0[0] = _v15.IsDirtyUnreliable;
			_dirtyUnreliable_0.Serialize(writer);
			if (_dirtyUnreliable_0[0])
			{
				_v15.SerializeSyncUnreliable(player, writer);
			}
		}
		public override void SerializeEveryProperty(IPacketWriter writer)
		{
			writer.Put(_v0);
			writer.Put(_v1);
			writer.Put(_v2);
			writer.Put(_v3);
			writer.Put(_v4);
			writer.Put(_v5);
			writer.Put(_v6);
			_v7.SerializeEveryProperty(writer);
			writer.Put(_v8);
			writer.Put(_v9);
			writer.Put(_v10);
			writer.Put(_v11);
			writer.Put(_v12);
			writer.Put(_v13);
			_v15.SerializeEveryProperty(writer);
			writer.Put(_v16);
			writer.Put(_v17);
			writer.Put(_v18);
			writer.Put(_v20);
			writer.Put(_v21);
			_v23.SerializeEveryProperty(writer);
		}
		public override void InitializeMasterProperties()
		{
			_v0 = 0;
			_v1 = 0;
			_v2 = 0;
			_v3 = 0;
			_v4 = 0;
			_v5 = 0;
			_v6 = 0;
			_v7.InitializeMasterProperties();
			_v8 = 0;
			_v9 = 0;
			_v10 = 0;
			_v11 = 0;
			_v12 = 0;
			_v13 = 0;
			_v15.InitializeMasterProperties();
			_v16 = 0;
			_v17 = 0;
			_v18 = 0;
			_v20 = 0;
			_v21 = 0;
			_v23.InitializeMasterProperties();
		}
		public override bool TryDeserializeSyncReliable(NetworkPlayer player, IPacketReader reader) => true;
		public override bool TryDeserializeSyncUnreliable(NetworkPlayer player, IPacketReader reader) => true;
		public override void InitializeRemoteProperties() { }
		public override void IgnoreSyncReliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticReliable(IPacketReader reader) { }
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
