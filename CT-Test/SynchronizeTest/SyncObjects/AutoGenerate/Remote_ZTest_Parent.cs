/*
 * Generated File : Remote_ZTest_Parent
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.DataType.Synchronizations;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class ZTest_Parent
	{
		[SyncVar(dir: SyncDirection.FromRemote)]
		protected int _field_Client_P1;
		[SyncVar(dir: SyncDirection.FromRemote)]
		protected float _field_Client_P2;
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_P1();
		[SyncRpc(dir: SyncDirection.FromRemote)]
		protected partial void Client_p2(int a, int b);
		[SyncVar]
		protected int _field_Server_P1;
		public int Field_Server_P1 => _field_Server_P1;
		protected Action<int>? _onField_Server_P1Changed;
		public event Action<int> OnField_Server_P1Changed
		{
			add => _onField_Server_P1Changed += value;
			remove => _onField_Server_P1Changed -= value;
		}
		[SyncVar]
		protected float _field_Server_P2;
		protected Action<float>? _onField_Server_P2Changed;
		public event Action<float> OnField_Server_P2Changed
		{
			add => _onField_Server_P2Changed += value;
			remove => _onField_Server_P2Changed -= value;
		}
		[SyncVar]
		protected int _space_1;
		public int Space_1 => _space_1;
		protected Action<int>? _onSpace_1Changed;
		public event Action<int> OnSpace_1Changed
		{
			add => _onSpace_1Changed += value;
			remove => _onSpace_1Changed -= value;
		}
		[SyncRpc]
		public virtual partial void Server_P1();
		[SyncRpc(SyncType.ReliableTarget)]
		protected virtual partial void Server_p2(int a, int b);
		protected BitmaskByte _dirtyReliable_0 = new();
		public override bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _dirtyReliable_0.AnyTrue();
				return isDirty;
			}
		}
		public override bool IsDirtyUnreliable => false;
		public int Field_Client_P1
		{
			get => _field_Client_P1;
			set
			{
				if (_field_Client_P1 == value) return;
				_field_Client_P1 = value;
				_dirtyReliable_0[0] = true;
			}
		}
		protected float Field_Client_P2
		{
			get => _field_Client_P2;
			set
			{
				if (_field_Client_P2 == value) return;
				_field_Client_P2 = value;
				_dirtyReliable_0[1] = true;
			}
		}
		public partial void Client_P1()
		{
			Client_P1CallstackCount++;
			_dirtyReliable_0[2] = true;
		}
		protected byte Client_P1CallstackCount = 0;
		protected partial void Client_p2(int a, int b)
		{
			Client_p2iiCallstack.Add((a, b));
			_dirtyReliable_0[3] = true;
		}
		protected List<(int a, int b)> Client_p2iiCallstack = new(4);
		public override void ClearDirtyReliable()
		{
			_dirtyReliable_0.Clear();
			Client_P1CallstackCount = 0;
			Client_p2iiCallstack.Clear();
		}
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer)
		{
			_dirtyReliable_0.Serialize(writer);
			if (_dirtyReliable_0[0])
			{
				writer.Put(_field_Client_P1);
			}
			if (_dirtyReliable_0[1])
			{
				writer.Put(_field_Client_P2);
			}
			if (_dirtyReliable_0[2])
			{
				writer.Put((byte)Client_P1CallstackCount);
			}
			if (_dirtyReliable_0[3])
			{
				byte count = (byte)Client_p2iiCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = Client_p2iiCallstack[i];
					writer.Put(arg.a);
					writer.Put(arg.b);
				}
			}
		}
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void SerializeEveryProperty(IPacketWriter writer)
		{
			writer.Put(_field_Client_P1);
			writer.Put(_field_Client_P2);
		}
		public override void InitializeMasterProperties()
		{
			_field_Client_P1 = 0;
			_field_Client_P2 = 0;
		}
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!reader.TryReadInt32(out _field_Server_P1)) return false;
				_onField_Server_P1Changed?.Invoke(_field_Server_P1);
			}
			if (dirtyReliable_0[1])
			{
				if (!reader.TryReadSingle(out _field_Server_P2)) return false;
				_onField_Server_P2Changed?.Invoke(_field_Server_P2);
			}
			if (dirtyReliable_0[2])
			{
				if (!reader.TryReadInt32(out _space_1)) return false;
				_onSpace_1Changed?.Invoke(_space_1);
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Server_P1();
				}
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadInt32(out int a)) return false;
					if (!reader.TryReadInt32(out int b)) return false;
					Server_p2(a, b);
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!reader.TryReadInt32(out _field_Server_P1)) return false;
			_onField_Server_P1Changed?.Invoke(_field_Server_P1);
			if (!reader.TryReadSingle(out _field_Server_P2)) return false;
			_onField_Server_P2Changed?.Invoke(_field_Server_P2);
			if (!reader.TryReadInt32(out _space_1)) return false;
			_onSpace_1Changed?.Invoke(_space_1);
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_field_Server_P1 = 0;
			_field_Server_P2 = 0;
			_space_1 = 0;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[1])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[3])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(4);
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[1])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[3])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(4);
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
