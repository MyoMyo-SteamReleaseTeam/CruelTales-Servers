/*
 * Generated File : Remote_ZTest_FuntionObject
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
#if UNITY_2021
using UnityEngine;
#endif

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class ZTest_FuntionObject : IRemoteSynchronizable
	{
		[SyncRpc]
		public partial void Server_VoidArg();
		[SyncRpc]
		public partial void Server_PrimitiveArg_1(float v0);
		[SyncRpc]
		public partial void Server_PrimitiveArg_2(float v0, int v1);
		[SyncRpc]
		public partial void Server_PrimitiveArg_3(float v0, int v1, double v2);
		[SyncRpc]
		public partial void Server_ValueTypeArg_1(NetVec2 v0);
		[SyncRpc]
		public partial void Server_ValueTypeArg_2(NetVec2 v0, NetString v1);
		[SyncRpc]
		public partial void Server_ValueTypeArg_3(UserId v0, NetVec2 v1, NetString v2);
		[SyncRpc]
		public partial void Server_EnumTypeArg_1(DisconnectReasonType v0, AckJoinMatch v1);
		[SyncRpc]
		public partial void Server_EnumTypeArg_2(AckJoinMatch v0, DisconnectReasonType v1);
		[SyncRpc]
		public partial void Server_EnumTypeArg_3(AckJoinMatch v0, DisconnectReasonType v1, AckJoinMatch v2);
		[SyncRpc]
		public partial void Server_CompositeArg_2_1(int v0, DisconnectReasonType v1);
		[SyncRpc]
		public partial void Server_CompositeArg_2_2(NetVec2 v0, DisconnectReasonType v1);
		[SyncRpc]
		public partial void Server_CompositeArg_3(NetVec2 v0, DisconnectReasonType v1, float v2);
		public bool IsDirtyReliable => false;
		public bool IsDirtyUnreliable => false;
		public void ClearDirtyReliable() { }
		public void ClearDirtyUnreliable() { }
		public void SerializeSyncReliable(IPacketWriter writer) { }
		public void SerializeSyncUnreliable(IPacketWriter writer) { }
		public void SerializeEveryProperty(IPacketWriter writer) { }
		public void InitializeProperties() { }
		public bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						Server_VoidArg();
					}
				}
				if (dirtyReliable_0[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadSingle(out float v0)) return false;
						Server_PrimitiveArg_1(v0);
					}
				}
				if (dirtyReliable_0[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadSingle(out float v0)) return false;
						if (!reader.TryReadInt32(out int v1)) return false;
						Server_PrimitiveArg_2(v0, v1);
					}
				}
				if (dirtyReliable_0[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadSingle(out float v0)) return false;
						if (!reader.TryReadInt32(out int v1)) return false;
						if (!reader.TryReadDouble(out double v2)) return false;
						Server_PrimitiveArg_3(v0, v1, v2);
					}
				}
				if (dirtyReliable_0[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2 v0 = new();
						if (!v0.TryDeserialize(reader)) return false;
						Server_ValueTypeArg_1(v0);
					}
				}
				if (dirtyReliable_0[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2 v0 = new();
						if (!v0.TryDeserialize(reader)) return false;
						NetString v1 = new();
						if (!v1.TryDeserialize(reader)) return false;
						Server_ValueTypeArg_2(v0, v1);
					}
				}
				if (dirtyReliable_0[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						UserId v0 = new();
						if (!v0.TryDeserialize(reader)) return false;
						NetVec2 v1 = new();
						if (!v1.TryDeserialize(reader)) return false;
						NetString v2 = new();
						if (!v2.TryDeserialize(reader)) return false;
						Server_ValueTypeArg_3(v0, v1, v2);
					}
				}
				if (dirtyReliable_0[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadByte(out var v0Value)) return false;
						DisconnectReasonType v0 = (DisconnectReasonType)v0Value;
						if (!reader.TryReadByte(out var v1Value)) return false;
						AckJoinMatch v1 = (AckJoinMatch)v1Value;
						Server_EnumTypeArg_1(v0, v1);
					}
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadByte(out var v0Value)) return false;
						AckJoinMatch v0 = (AckJoinMatch)v0Value;
						if (!reader.TryReadByte(out var v1Value)) return false;
						DisconnectReasonType v1 = (DisconnectReasonType)v1Value;
						Server_EnumTypeArg_2(v0, v1);
					}
				}
				if (dirtyReliable_1[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadByte(out var v0Value)) return false;
						AckJoinMatch v0 = (AckJoinMatch)v0Value;
						if (!reader.TryReadByte(out var v1Value)) return false;
						DisconnectReasonType v1 = (DisconnectReasonType)v1Value;
						if (!reader.TryReadByte(out var v2Value)) return false;
						AckJoinMatch v2 = (AckJoinMatch)v2Value;
						Server_EnumTypeArg_3(v0, v1, v2);
					}
				}
				if (dirtyReliable_1[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int v0)) return false;
						if (!reader.TryReadByte(out var v1Value)) return false;
						DisconnectReasonType v1 = (DisconnectReasonType)v1Value;
						Server_CompositeArg_2_1(v0, v1);
					}
				}
				if (dirtyReliable_1[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2 v0 = new();
						if (!v0.TryDeserialize(reader)) return false;
						if (!reader.TryReadByte(out var v1Value)) return false;
						DisconnectReasonType v1 = (DisconnectReasonType)v1Value;
						Server_CompositeArg_2_2(v0, v1);
					}
				}
				if (dirtyReliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2 v0 = new();
						if (!v0.TryDeserialize(reader)) return false;
						if (!reader.TryReadByte(out var v1Value)) return false;
						DisconnectReasonType v1 = (DisconnectReasonType)v1Value;
						if (!reader.TryReadSingle(out float v2)) return false;
						Server_CompositeArg_3(v0, v1, v2);
					}
				}
			}
			return true;
		}
		public bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public bool TryDeserializeEveryProperty(IPacketReader reader) => true;
		public void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_0[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_0[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
						reader.Ignore(8);
					}
				}
				if (dirtyReliable_0[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.IgnoreStatic(reader);
					}
				}
				if (dirtyReliable_0[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.IgnoreStatic(reader);
						NetString.IgnoreStatic(reader);
					}
				}
				if (dirtyReliable_0[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						UserId.IgnoreStatic(reader);
						NetVec2.IgnoreStatic(reader);
						NetString.IgnoreStatic(reader);
					}
				}
				if (dirtyReliable_0[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(1);
					}
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_1[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(1);
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_1[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_1[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.IgnoreStatic(reader);
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.IgnoreStatic(reader);
						reader.Ignore(1);
						reader.Ignore(4);
					}
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_0[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_0[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
						reader.Ignore(8);
					}
				}
				if (dirtyReliable_0[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.IgnoreStatic(reader);
					}
				}
				if (dirtyReliable_0[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.IgnoreStatic(reader);
						NetString.IgnoreStatic(reader);
					}
				}
				if (dirtyReliable_0[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						UserId.IgnoreStatic(reader);
						NetVec2.IgnoreStatic(reader);
						NetString.IgnoreStatic(reader);
					}
				}
				if (dirtyReliable_0[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(1);
					}
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_1[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(1);
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_1[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_1[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.IgnoreStatic(reader);
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.IgnoreStatic(reader);
						reader.Ignore(1);
						reader.Ignore(4);
					}
				}
			}
		}
		public void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
