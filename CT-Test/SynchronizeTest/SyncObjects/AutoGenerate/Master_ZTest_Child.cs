/*
 * Generated File : Master_ZTest_Child
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTS.Instance.Gameplay;
using CTS.Instance.Synchronizations;
using CTS.Instance.SyncObjects;

namespace CTS.Instance.SyncObjects
{
	[Serializable]
	public partial class ZTest_Child
	{
		[SyncVar]
		protected int _field_Server_C3;
		[SyncVar]
		protected int _field_Server_C4;
		[SyncVar]
		protected int _space_2;
		[SyncVar]
		protected int _space_3;
		[SyncRpc]
		public partial void Server_C3();
		[SyncRpc(SyncType.ReliableTarget)]
		protected partial void Server_c4(NetworkPlayer player);
		[SyncVar(dir: SyncDirection.FromRemote)]
		protected int _field_Client_C3;
		public int Field_Client_C3 => _field_Client_C3;
		protected Action<int>? _onField_Client_C3Changed;
		public event Action<int> OnField_Client_C3Changed
		{
			add => _onField_Client_C3Changed += value;
			remove => _onField_Client_C3Changed -= value;
		}
		[SyncVar(dir: SyncDirection.FromRemote)]
		protected int _field_Client_C4;
		protected Action<int>? _onField_Client_C4Changed;
		public event Action<int> OnField_Client_C4Changed
		{
			add => _onField_Client_C4Changed += value;
			remove => _onField_Client_C4Changed -= value;
		}
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_C3(NetworkPlayer player);
		[SyncRpc(dir: SyncDirection.FromRemote)]
		protected partial void Client_c4(NetworkPlayer player);
		protected BitmaskByte _dirtyReliable_1 = new();
		public override bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _dirtyReliable_0.AnyTrue();
				isDirty |= _dirtyReliable_1.AnyTrue();
				return isDirty;
			}
		}
		public override bool IsDirtyUnreliable => false;
		public int Field_Server_C3
		{
			get => _field_Server_C3;
			set
			{
				if (_field_Server_C3 == value) return;
				_field_Server_C3 = value;
				_dirtyReliable_0[5] = true;
			}
		}
		protected int Field_Server_C4
		{
			get => _field_Server_C4;
			set
			{
				if (_field_Server_C4 == value) return;
				_field_Server_C4 = value;
				_dirtyReliable_0[6] = true;
			}
		}
		public int Space_2
		{
			get => _space_2;
			set
			{
				if (_space_2 == value) return;
				_space_2 = value;
				_dirtyReliable_0[7] = true;
			}
		}
		public int Space_3
		{
			get => _space_3;
			set
			{
				if (_space_3 == value) return;
				_space_3 = value;
				_dirtyReliable_1[0] = true;
			}
		}
		public partial void Server_C3()
		{
			Server_C3CallstackCount++;
			_dirtyReliable_1[1] = true;
		}
		protected byte Server_C3CallstackCount = 0;
		protected partial void Server_c4(NetworkPlayer player)
		{
			Server_c4Callstack.Add(player);
			_dirtyReliable_1[2] = true;
		}
		protected TargetVoidCallstack<NetworkPlayer> Server_c4Callstack = new(8);
		public override void ClearDirtyReliable()
		{
			_dirtyReliable_0.Clear();
			Server_P1CallstackCount = 0;
			Server_p2iiCallstack.Clear();
			_dirtyReliable_1.Clear();
			Server_C3CallstackCount = 0;
			Server_c4Callstack.Clear();
		}
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(NetworkPlayer player, IPacketWriter writer)
		{
			int originSize = writer.Size;
			BitmaskByte dirtyReliable_0 = _dirtyReliable_0;
			int dirtyReliable_0_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyReliable_0.AnyTrue())
			{
				if (_dirtyReliable_0[0])
				{
					writer.Put(_field_Server_P1);
				}
				if (_dirtyReliable_0[1])
				{
					writer.Put(_field_Server_P2);
				}
				if (_dirtyReliable_0[2])
				{
					writer.Put(_space_1);
				}
				if (_dirtyReliable_0[3])
				{
					writer.Put((byte)Server_P1CallstackCount);
				}
				if (_dirtyReliable_0[4])
				{
					int Server_p2iiCount = Server_p2iiCallstack.GetCallCount(player);
					if (Server_p2iiCount > 0)
					{
						var Server_p2iicallList = Server_p2iiCallstack.GetCallList(player);
						writer.Put((byte)Server_p2iiCount);
						for (int i = 0; i < Server_p2iiCount; i++)
						{
							var arg = Server_p2iicallList[i];
							writer.Put(arg.a);
							writer.Put(arg.b);
						}
					}
					else
					{
						dirtyReliable_0[4] = false;
					}
				}
				if (_dirtyReliable_0[5])
				{
					writer.Put(_field_Server_C3);
				}
				if (_dirtyReliable_0[6])
				{
					writer.Put(_field_Server_C4);
				}
				if (_dirtyReliable_0[7])
				{
					writer.Put(_space_2);
				}
			}
			writer.PutTo(dirtyReliable_0, dirtyReliable_0_pos);
			BitmaskByte dirtyReliable_1 = _dirtyReliable_1;
			int dirtyReliable_1_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyReliable_1.AnyTrue())
			{
				if (_dirtyReliable_1[0])
				{
					writer.Put(_space_3);
				}
				if (_dirtyReliable_1[1])
				{
					writer.Put((byte)Server_C3CallstackCount);
				}
				if (_dirtyReliable_1[2])
				{
					int Server_c4Count = Server_c4Callstack.GetCallCount(player);
					if (Server_c4Count > 0)
					{
						writer.Put((byte)Server_c4Count);
					}
					else
					{
						dirtyReliable_1[2] = false;
					}
				}
			}
			writer.PutTo(dirtyReliable_1, dirtyReliable_1_pos);
			if (writer.Size == originSize + 2)
			{
				writer.SetSize(originSize);
			}
		}
		public override void SerializeSyncUnreliable(NetworkPlayer player, IPacketWriter writer) { }
		public override void SerializeEveryProperty(IPacketWriter writer)
		{
			writer.Put(_field_Server_P1);
			writer.Put(_field_Server_P2);
			writer.Put(_space_1);
			writer.Put(_field_Server_C3);
			writer.Put(_field_Server_C4);
			writer.Put(_space_2);
			writer.Put(_space_3);
		}
		public override void InitializeMasterProperties()
		{
			_field_Server_P1 = 0;
			_field_Server_P2 = 0;
			_space_1 = 0;
			_field_Server_C3 = 0;
			_field_Server_C4 = 0;
			_space_2 = 0;
			_space_3 = 0;
		}
		public override bool TryDeserializeSyncReliable(NetworkPlayer player, IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!reader.TryReadInt32(out _field_Client_P1)) return false;
				_onField_Client_P1Changed?.Invoke(_field_Client_P1);
			}
			if (dirtyReliable_0[1])
			{
				if (!reader.TryReadSingle(out _field_Client_P2)) return false;
				_onField_Client_P2Changed?.Invoke(_field_Client_P2);
			}
			if (dirtyReliable_0[2])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Client_P1(player);
				}
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadInt32(out int a)) return false;
					if (!reader.TryReadInt32(out int b)) return false;
					Client_p2(player, a, b);
				}
			}
			if (dirtyReliable_0[4])
			{
				if (!reader.TryReadInt32(out _field_Client_C3)) return false;
				_onField_Client_C3Changed?.Invoke(_field_Client_C3);
			}
			if (dirtyReliable_0[5])
			{
				if (!reader.TryReadInt32(out _field_Client_C4)) return false;
				_onField_Client_C4Changed?.Invoke(_field_Client_C4);
			}
			if (dirtyReliable_0[6])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Client_C3(player);
				}
			}
			if (dirtyReliable_0[7])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Client_c4(player);
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(NetworkPlayer player, IPacketReader reader) => true;
		public override void InitializeRemoteProperties()
		{
			_field_Client_P1 = 0;
			_field_Client_P2 = 0;
			_field_Client_C3 = 0;
			_field_Client_C4 = 0;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[1])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(4);
				}
			}
			if (dirtyReliable_0[4])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[5])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[6])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[7])
			{
				reader.Ignore(1);
			}
		}
		public new static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[1])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
					reader.Ignore(4);
				}
			}
			if (dirtyReliable_0[4])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[5])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[6])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[7])
			{
				reader.Ignore(1);
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public new static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
