/*
 * Generated File : Master_TestNetworkObjectWith3Prop
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTS.Instance.Synchronizations;
using CTS.Instance.SyncObjects;

namespace CT.Test.SynchronizeTest
{
	[Serializable]
	public partial class TestMasterNetworkObject : MasterNetworkObject
	{
		public override NetworkObjectType Type => NetworkObjectType.None;
		[SyncVar]
		private UserToken _userToken = new();
		[SyncVar]
		private int _intValue;
		[SyncRpc]
		public partial void Server_SendValue(float floatParam);
		[SyncRpc]
		public partial void Server_SendMessage(NetStringShort textParam);
		private BitmaskByte _dirtyReliable_0 = new();
		public override bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _dirtyReliable_0.AnyTrue();
				return isDirty;
			}
		}
		public override bool IsDirtyUnreliable => false;
		public UserToken UserToken
		{
			get => _userToken;
			set
			{
				if (_userToken == value) return;
				_userToken = value;
				_dirtyReliable_0[0] = true;
			}
		}
		public int IntValue
		{
			get => _intValue;
			set
			{
				if (_intValue == value) return;
				_intValue = value;
				_dirtyReliable_0[1] = true;
			}
		}
		public partial void Server_SendValue(float floatParam)
		{
			Server_SendValueCallstack.Enqueue(floatParam);
			_dirtyReliable_0[2] = true;
		}
		private Queue<float> Server_SendValueCallstack = new();
		public partial void Server_SendMessage(NetStringShort textParam)
		{
			Server_SendMessageCallstack.Enqueue(textParam);
			_dirtyReliable_0[3] = true;
		}
		private Queue<NetStringShort> Server_SendMessageCallstack = new();
		public override void ClearDirtyReliable()
		{
			_dirtyReliable_0.Clear();
		}
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(PacketWriter writer)
		{
			BitmaskByte masterDirty = new BitmaskByte();
			masterDirty[0] = _dirtyReliable_0.AnyTrue();
			masterDirty.Serialize(writer);
			if (masterDirty[0])
			{
				_dirtyReliable_0.Serialize(writer);
				if (_dirtyReliable_0[0])
				{
					_userToken.Serialize(writer);
				}
				if (_dirtyReliable_0[1])
				{
					writer.Put(_intValue);
				}
				if (_dirtyReliable_0[2])
				{
					byte count = (byte)Server_SendValueCallstack.Count;
					writer.Put(count);
					for (int i = 0; i < count; i++)
					{
						var arg = Server_SendValueCallstack.Dequeue();
						writer.Put(arg);
					}
				}
				if (_dirtyReliable_0[3])
				{
					byte count = (byte)Server_SendMessageCallstack.Count;
					writer.Put(count);
					for (int i = 0; i < count; i++)
					{
						var arg = Server_SendMessageCallstack.Dequeue();
						arg.Serialize(writer);
					}
				}
			}
		}
		public override void SerializeSyncUnreliable(PacketWriter writer) { }
		public override void SerializeEveryProperty(PacketWriter writer)
		{
			_userToken.Serialize(writer);
			writer.Put(_intValue);
		}
		public override void DeserializeSyncReliable(PacketReader reader) { }
		public override void DeserializeSyncUnreliable(PacketReader reader) { }
		public override void DeserializeEveryProperty(PacketReader reader) { }

		public override void IgnoreSyncReliable(PacketReader reader)
		{
			throw new NotImplementedException();
		}

		public override void IgnoreSyncUnreliable(PacketReader reader)
		{
			throw new NotImplementedException();
		}
	}
}
#pragma warning restore CS0649
