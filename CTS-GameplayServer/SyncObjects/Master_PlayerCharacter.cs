/*
 * Generated File : Master_PlayerCharacter
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTS.Instance.Gameplay;
using CTS.Instance.Synchronizations;
using CTS.Instance.SyncObjects;

namespace CTS.Instance.SyncObjects
{
	[Serializable]
	public partial class PlayerCharacter
	{
		public override NetworkObjectType Type => NetworkObjectType.PlayerCharacter;
		[SyncVar]
		private UserId _userId = new();
		[SyncVar]
		private NetStringShort _username = new();
		[SyncVar(SyncType.ColdData)]
		private DokzaAnimationState _animationState = new();
		[SyncVar(SyncType.ColdData)]
		private ProxyDirection _proxyDirection = new();
		[SyncVar(SyncType.ColdData)]
		private float _animationTime;
		[SyncRpc]
		public partial void Server_OnAnimationChanged(DokzaAnimationState state);
		[SyncRpc]
		public partial void Server_OnAnimationChanged(DokzaAnimationState state, ProxyDirection direction);
		[SyncRpc]
		public partial void Server_OnProxyDirectionChanged(ProxyDirection direction);
		[SyncRpc(dir: SyncDirection.FromRemote, sync: SyncType.Unreliable)]
		public partial void Client_RequestInput(NetworkPlayer player, InputData inputData);
		public PlayerCharacter()
		{
		}
		private BitmaskByte _dirtyReliable_0 = new();
		public UserId UserId
		{
			get => _userId;
			set
			{
				if (_userId == value) return;
				_userId = value;
				_dirtyReliable_0[0] = true;
				MarkDirtyReliable();
			}
		}
		public NetStringShort Username
		{
			get => _username;
			set
			{
				if (_username == value) return;
				_username = value;
				_dirtyReliable_0[1] = true;
				MarkDirtyReliable();
			}
		}
		public partial void Server_OnAnimationChanged(DokzaAnimationState state)
		{
			Server_OnAnimationChangedDCallstack.Add(state);
			_dirtyReliable_0[2] = true;
			MarkDirtyReliable();
		}
		private List<DokzaAnimationState> Server_OnAnimationChangedDCallstack = new(4);
		public partial void Server_OnAnimationChanged(DokzaAnimationState state, ProxyDirection direction)
		{
			Server_OnAnimationChangedDPCallstack.Add((state, direction));
			_dirtyReliable_0[3] = true;
			MarkDirtyReliable();
		}
		private List<(DokzaAnimationState state, ProxyDirection direction)> Server_OnAnimationChangedDPCallstack = new(4);
		public partial void Server_OnProxyDirectionChanged(ProxyDirection direction)
		{
			Server_OnProxyDirectionChangedPCallstack.Add(direction);
			_dirtyReliable_0[4] = true;
			MarkDirtyReliable();
		}
		private List<ProxyDirection> Server_OnProxyDirectionChangedPCallstack = new(4);
		public override void ClearDirtyReliable()
		{
			_isDirtyReliable = false;
			_dirtyReliable_0.Clear();
			Server_OnAnimationChangedDCallstack.Clear();
			Server_OnAnimationChangedDPCallstack.Clear();
			Server_OnProxyDirectionChangedPCallstack.Clear();
		}
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(NetworkPlayer player, IPacketWriter writer)
		{
			_dirtyReliable_0.Serialize(writer);
			if (_dirtyReliable_0[0])
			{
				_userId.Serialize(writer);
			}
			if (_dirtyReliable_0[1])
			{
				_username.Serialize(writer);
			}
			if (_dirtyReliable_0[2])
			{
				byte count = (byte)Server_OnAnimationChangedDCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = Server_OnAnimationChangedDCallstack[i];
					writer.Put((byte)arg);
				}
			}
			if (_dirtyReliable_0[3])
			{
				byte count = (byte)Server_OnAnimationChangedDPCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = Server_OnAnimationChangedDPCallstack[i];
					writer.Put((byte)arg.state);
					writer.Put((byte)arg.direction);
				}
			}
			if (_dirtyReliable_0[4])
			{
				byte count = (byte)Server_OnProxyDirectionChangedPCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = Server_OnProxyDirectionChangedPCallstack[i];
					writer.Put((byte)arg);
				}
			}
		}
		public override void SerializeSyncUnreliable(NetworkPlayer player, IPacketWriter writer) { }
		public override void SerializeEveryProperty(IPacketWriter writer)
		{
			_userId.Serialize(writer);
			_username.Serialize(writer);
			writer.Put((byte)_animationState);
			writer.Put((byte)_proxyDirection);
			writer.Put(_animationTime);
		}
		public override void InitializeMasterProperties()
		{
			_userId = new();
			_username = new();
			_animationState = (DokzaAnimationState)0;
			_proxyDirection = (ProxyDirection)0;
			_animationTime = 0;
		}
		public override bool TryDeserializeSyncReliable(NetworkPlayer player, IPacketReader reader) => true;
		public override bool TryDeserializeSyncUnreliable(NetworkPlayer player, IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0[0])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					InputData inputData = new();
					if (!inputData.TryDeserialize(reader)) return false;
					Client_RequestInput(player, inputData);
				}
			}
			return true;
		}
		public override void InitializeRemoteProperties() { }
		public override void IgnoreSyncReliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticReliable(IPacketReader reader) { }
		public override void IgnoreSyncUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0[0])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					InputData.IgnoreStatic(reader);
				}
			}
		}
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader)
		{
			BitmaskByte dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (dirtyUnreliable_0[0])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					InputData.IgnoreStatic(reader);
				}
			}
		}
	}
}
#pragma warning restore CS0649
