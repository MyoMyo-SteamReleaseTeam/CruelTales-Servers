/*
 * Generated File : Master_TestInnerObject
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Serialization.Type;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTS.Instance.Synchronizations;

namespace CTS.Instance.SyncObjects
{
	[Serializable]
	public partial class TestInnerObject : ISynchronizable
	{
		[SyncVar]
		private int _testInt;
		[SyncRpc]
		public partial void Server_Rename(NetStringShort newName);
		private BitmaskByte _dirtyReliable_0 = new();
		public bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _dirtyReliable_0.AnyTrue();
				return isDirty;
			}
		}
		public bool IsDirtyUnreliable => false;
		private int TestInt
		{
			get => _testInt;
			set
			{
				if (_testInt == value) return;
				_testInt = value;
				_dirtyReliable_0[0] = true;
			}
		}
		public partial void Server_Rename(NetStringShort newName)
		{
			Server_RenameCallstack.Enqueue(newName);
			_dirtyReliable_0[1] = true;
		}
		private Queue<NetStringShort> Server_RenameCallstack = new();
		public void ClearDirtyReliable()
		{
			_dirtyReliable_0.Clear();
		}
		public void ClearDirtyUnreliable() { }
		public void SerializeSyncReliable(PacketWriter writer)
		{
			_dirtyReliable_0.Serialize(writer);
			if (_dirtyReliable_0[0])
			{
				writer.Put(_testInt);
			}
			if (_dirtyReliable_0[1])
			{
				byte count = (byte)Server_RenameCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = Server_RenameCallstack.Dequeue();
					arg.Serialize(writer);
				}
			}
		}
		public void SerializeSyncUnreliable(PacketWriter writer) { }
		public void SerializeEveryProperty(PacketWriter writer)
		{
			writer.Put(_testInt);
		}
		public void DeserializeSyncReliable(PacketReader reader) { }
		public void DeserializeSyncUnreliable(PacketReader reader) { }
		public void DeserializeEveryProperty(PacketReader reader) { }
		public static void IgnoreSyncReliable(PacketReader reader) { }
		public static void IgnoreSyncUnreliable(PacketReader reader) { }
	}
}
#pragma warning restore CS0649
