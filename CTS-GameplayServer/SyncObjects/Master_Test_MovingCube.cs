/*
 * Generated File : Master_Test_MovingCube.cs
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Serialization.Type;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTS.Instance.Synchronizations;

namespace CTS.Instance.SyncObjects
{
	[Serializable]
	public partial class Test_MovingCube : MasterNetworkObject
	{
		public override NetworkObjectType Type => NetworkObjectType.Test_MovingCube;
		/// DECLARE MASTER SIDE SYNC ELEMETS ///
		[SyncVar]
		private NetworkIdentity _networkIdentity = new();
		[SyncVar]
		private byte _r;
		[SyncVar]
		private byte _g;
		[SyncVar]
		private byte _b;
		[SyncVar]
		private float _speed;
		[SyncVar]
		private float _x;
		[SyncVar]
		private float _y;
		[SyncVar]
		private float _z;
		[SyncVar]
		private float _dest;
		[SyncRpc]
		public partial void Server_MoveTo(float _y);
#region SYNCHRONIZATIONS
		private BitmaskByte _propertyDirty_0 = new();
		private BitmaskByte _propertyDirty_1 = new();
		private BitmaskByte _rpcDirty_0 = new();
		public override bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _propertyDirty_0.AnyTrue();
				isDirty |= _propertyDirty_1.AnyTrue();
				isDirty |= _rpcDirty_0.AnyTrue();
				return isDirty;
			}
		}
		public NetworkIdentity NetworkIdentity
		{
			get => _networkIdentity;
			set
			{
				if (_networkIdentity == value) return;
				_networkIdentity = value;
				_propertyDirty_0[0] = true;
			}
		}
		public byte R
		{
			get => _r;
			set
			{
				if (_r == value) return;
				_r = value;
				_propertyDirty_0[1] = true;
			}
		}
		public byte G
		{
			get => _g;
			set
			{
				if (_g == value) return;
				_g = value;
				_propertyDirty_0[2] = true;
			}
		}
		public byte B
		{
			get => _b;
			set
			{
				if (_b == value) return;
				_b = value;
				_propertyDirty_0[3] = true;
			}
		}
		public float Speed
		{
			get => _speed;
			set
			{
				if (_speed == value) return;
				_speed = value;
				_propertyDirty_0[4] = true;
			}
		}
		public float X
		{
			get => _x;
			set
			{
				if (_x == value) return;
				_x = value;
				_propertyDirty_0[5] = true;
			}
		}
		public float Y
		{
			get => _y;
			set
			{
				if (_y == value) return;
				_y = value;
				_propertyDirty_0[6] = true;
			}
		}
		public float Z
		{
			get => _z;
			set
			{
				if (_z == value) return;
				_z = value;
				_propertyDirty_0[7] = true;
			}
		}
		public float Dest
		{
			get => _dest;
			set
			{
				if (_dest == value) return;
				_dest = value;
				_propertyDirty_1[0] = true;
			}
		}
		public partial void Server_MoveTo(float _y)
		{
			Server_MoveToCallstack.Enqueue(_y);
			_rpcDirty_0[0] = true;
		}
		private Queue<float> Server_MoveToCallstack = new();
		public override bool IsDirtyUnreliable => false;
		public override void SerializeSyncReliable(PacketWriter writer)
		{
			BitmaskByte objectDirty = new BitmaskByte();
			objectDirty[0] = _propertyDirty_0.AnyTrue();
			objectDirty[1] = _propertyDirty_1.AnyTrue();
			objectDirty[4] = _rpcDirty_0.AnyTrue();
			objectDirty.Serialize(writer);
			if (objectDirty[0])
			{
				_propertyDirty_0.Serialize(writer);
				if (_propertyDirty_0[0]) _networkIdentity.Serialize(writer);
				if (_propertyDirty_0[1]) writer.Put(_r);
				if (_propertyDirty_0[2]) writer.Put(_g);
				if (_propertyDirty_0[3]) writer.Put(_b);
				if (_propertyDirty_0[4]) writer.Put(_speed);
				if (_propertyDirty_0[5]) writer.Put(_x);
				if (_propertyDirty_0[6]) writer.Put(_y);
				if (_propertyDirty_0[7]) writer.Put(_z);
			}
			if (objectDirty[1])
			{
				_propertyDirty_1.Serialize(writer);
				if (_propertyDirty_1[0]) writer.Put(_dest);
			}
			if (objectDirty[4])
			{
				_rpcDirty_0.Serialize(writer);
				if (_rpcDirty_0[0])
				{
					byte count = (byte)Server_MoveToCallstack.Count;
					writer.Put(count);
					for (int i = 0; i < count; i++)
					{
						var arg = Server_MoveToCallstack.Dequeue();
						writer.Put(arg);
					}
				}
			}
		}
		public override void SerializeSyncUnreliable(PacketWriter writer) { }
		public override void SerializeEveryProperty(PacketWriter writer)
		{
			_networkIdentity.Serialize(writer);
			writer.Put(_r);
			writer.Put(_g);
			writer.Put(_b);
			writer.Put(_speed);
			writer.Put(_x);
			writer.Put(_y);
			writer.Put(_z);
			writer.Put(_dest);
		}
		public override void DeserializeSyncReliable(PacketReader reader) { }
		public override void DeserializeSyncUnreliable(PacketReader reader) { }
		public override void DeserializeEveryProperty(PacketReader reader) { }
		public override void ClearDirtyReliable()
		{
			_propertyDirty_0.Clear();
			_propertyDirty_1.Clear();
			_rpcDirty_0.Clear();
		}
		public override void ClearDirtyUnreliable() {}
#endregion
	}
}
#pragma warning restore CS0649
