/*
 * Generated File : Remote_TestCube
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class TestCube
	{
		public override NetworkObjectType Type => NetworkObjectType.TestCube;
		[SyncVar]
		private float _r;
		public float R => _r;
		private Action<float>? _onRChanged;
		public event Action<float> OnRChanged
		{
			add => _onRChanged += value;
			remove => _onRChanged -= value;
		}
		[SyncVar]
		private float _g;
		public float G => _g;
		private Action<float>? _onGChanged;
		public event Action<float> OnGChanged
		{
			add => _onGChanged += value;
			remove => _onGChanged -= value;
		}
		[SyncVar]
		private float _b;
		public float B => _b;
		private Action<float>? _onBChanged;
		public event Action<float> OnBChanged
		{
			add => _onBChanged += value;
			remove => _onBChanged -= value;
		}
		[SyncVar(SyncType.ColdData)]
		private float _animationTime;
		public float AnimationTime => _animationTime;
		private Action<float>? _onAnimationTimeChanged;
		public event Action<float> OnAnimationTimeChanged
		{
			add => _onAnimationTimeChanged += value;
			remove => _onAnimationTimeChanged -= value;
		}
		[SyncRpc]
		public partial void TestRPC(long someMessage);
		public override bool IsDirtyReliable => false;
		public override bool IsDirtyUnreliable => false;
		public override void ClearDirtyReliable() { }
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer) { }
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!reader.TryReadSingle(out _r)) return false;
				_onRChanged?.Invoke(_r);
			}
			if (dirtyReliable_0[1])
			{
				if (!reader.TryReadSingle(out _g)) return false;
				_onGChanged?.Invoke(_g);
			}
			if (dirtyReliable_0[2])
			{
				if (!reader.TryReadSingle(out _b)) return false;
				_onBChanged?.Invoke(_b);
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadInt64(out long someMessage)) return false;
					TestRPC(someMessage);
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!reader.TryReadSingle(out _r)) return false;
			_onRChanged?.Invoke(_r);
			if (!reader.TryReadSingle(out _g)) return false;
			_onGChanged?.Invoke(_g);
			if (!reader.TryReadSingle(out _b)) return false;
			_onBChanged?.Invoke(_b);
			if (!reader.TryReadSingle(out _animationTime)) return false;
			_onAnimationTimeChanged?.Invoke(_animationTime);
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_r = 0;
			_g = 0;
			_b = 0;
			_animationTime = 0;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[1])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(8);
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[1])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(8);
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
