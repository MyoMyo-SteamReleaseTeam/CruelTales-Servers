/*
 * Generated File : Remote_TestTypeSync
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Serialization.Type;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class TestTypeSync : RemoteNetworkObject
	{
		public override NetworkObjectType Type => NetworkObjectType.TestTypeSync;
		[SyncVar]
		private UserToken _valueTypeUserToken = new();
		public event Action<UserToken>? OnValueTypeUserTokenChanged;
		[SyncVar]
		private float _primitiveType;
		public event Action<float>? OnPrimitiveTypeChanged;
		[SyncVar]
		private NetEntityType _enumType;
		public event Action<NetEntityType>? OnEnumTypeChanged;
		[SyncVar]
		private NetTransform _valueTypeTransform = new();
		public event Action<NetTransform>? OnValueTypeTransformChanged;
		[SyncVar]
		private NetString _stringValue = new();
		public event Action<NetString>? OnStringValueChanged;
		[SyncObject(SyncType.RelibaleOrUnreliable)]
		private TestInnerObject _syncObjectBothSide;
		public event Action<TestInnerObject>? OnSyncObjectBothSideChanged;
		[SyncObject]
		private TestInnerObject _syncObjectReliable;
		public event Action<TestInnerObject>? OnSyncObjectReliableChanged;
		[SyncRpc]
		public partial void Server_Reliable();
		[SyncRpc(SyncType.Unreliable)]
		public partial void Server_Unreliable(NetString message);
		public override bool IsDirtyReliable => false;
		public override bool IsDirtyUnreliable => false;
		public override void ClearDirtyReliable() { }
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(PacketWriter writer) { }
		public override void SerializeSyncUnreliable(PacketWriter writer) { }
		public override void SerializeEveryProperty(PacketWriter writer) { }
		public override void DeserializeSyncReliable(PacketReader reader)
		{
			BitmaskByte _dirtyReliable_0 = reader.ReadBitmaskByte();
			if (_dirtyReliable_0[0])
			{
				_valueTypeUserToken.Deserialize(reader);
				OnValueTypeUserTokenChanged?.Invoke(_valueTypeUserToken);
			}
			if (_dirtyReliable_0[1])
			{
				_primitiveType = reader.ReadSingle();
				OnPrimitiveTypeChanged?.Invoke(_primitiveType);
			}
			if (_dirtyReliable_0[2])
			{
				_enumType = (NetEntityType)reader.ReadByte();
				OnEnumTypeChanged?.Invoke(_enumType);
			}
			if (_dirtyReliable_0[3])
			{
				_valueTypeTransform.Deserialize(reader);
				OnValueTypeTransformChanged?.Invoke(_valueTypeTransform);
			}
			if (_dirtyReliable_0[4])
			{
				_stringValue.Deserialize(reader);
				OnStringValueChanged?.Invoke(_stringValue);
			}
			if (_dirtyReliable_0[5])
			{
				_syncObjectBothSide.DeserializeReliable(reader);
				OnSyncObjectBothSideChanged?.Invoke(_syncObjectBothSide);
			}
			if (_dirtyReliable_0[6])
			{
				_syncObjectReliable.DeserializeReliable(reader);
				OnSyncObjectReliableChanged?.Invoke(_syncObjectReliable);
			}
			if (_dirtyReliable_0[7])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Server_Reliable();
				}
			}
		}
		public override void DeserializeSyncUnreliable(PacketReader reader)
		{
			BitmaskByte _dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (_dirtyUnreliable_0[0])
			{
				_syncObjectBothSide.DeserializeUnreliable(reader);
				OnSyncObjectBothSideChanged?.Invoke(_syncObjectBothSide);
			}
			if (_dirtyUnreliable_0[1])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					NetString message = new();
					message.Deserialize(reader);
					Server_Unreliable(message);
				}
			}
		}
		public override void DeserializeEveryProperty(PacketReader reader)
		{
			_valueTypeUserToken.Deserialize(reader);
			OnValueTypeUserTokenChanged?.Invoke(_valueTypeUserToken);
			_primitiveType = reader.ReadSingle();
			OnPrimitiveTypeChanged?.Invoke(_primitiveType);
			_enumType = (NetEntityType)reader.ReadByte();
			OnEnumTypeChanged?.Invoke(_enumType);
			_valueTypeTransform.Deserialize(reader);
			OnValueTypeTransformChanged?.Invoke(_valueTypeTransform);
			_stringValue.Deserialize(reader);
			OnStringValueChanged?.Invoke(_stringValue);
			_syncObjectBothSide.DeserializeNone(reader);
			OnSyncObjectBothSideChanged?.Invoke(_syncObjectBothSide);
			_syncObjectReliable.DeserializeNone(reader);
			OnSyncObjectReliableChanged?.Invoke(_syncObjectReliable);
		}
		public static void IgnoreSyncReliable(PacketReader reader)
		{
			BitmaskByte _dirtyReliable_0 = reader.ReadBitmaskByte();
			if (_dirtyReliable_0[0])
			{
				UserToken.Ignore(reader);
			}
			if (_dirtyReliable_0[1])
			{
				reader.Ignore(4);
			}
			if (_dirtyReliable_0[2])
			{
				reader.Ignore(1);
			}
			if (_dirtyReliable_0[3])
			{
				NetTransform.Ignore(reader);
			}
			if (_dirtyReliable_0[4])
			{
				NetString.Ignore(reader);
			}
			if (_dirtyReliable_0[5])
			{
				_syncObjectBothSide.IgnoreSyncReliable(reader);
			}
			if (_dirtyReliable_0[6])
			{
				_syncObjectReliable.IgnoreSyncReliable(reader);
			}
			if (_dirtyReliable_0[7])
			{
				reader.Ignore(1);
			}
		}
		public static void IgnoreSyncUnreliable(PacketReader reader)
		{
			BitmaskByte _dirtyUnreliable_0 = reader.ReadBitmaskByte();
			if (_dirtyUnreliable_0[0])
			{
				_syncObjectBothSide.IgnoreSyncUnreliable(reader);
			}
			if (_dirtyUnreliable_0[1])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					NetString.Ignore(reader);
				}
			}
		}
	}
}
#pragma warning restore CS0649
