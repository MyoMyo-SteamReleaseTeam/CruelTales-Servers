/*
 * Generated File : Remote_GameplayController
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class GameplayController
	{
		public override NetworkObjectType Type => NetworkObjectType.GameplayController;
		[SyncObject(dir: SyncDirection.FromRemote)]
		private readonly RoomSessionManager _sessionManager;
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_ReadyToSync();
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_OnMapLoaded();
		private Action<RoomSessionManager>? _onSessionManagerChanged;
		public event Action<RoomSessionManager> OnSessionManagerChanged
		{
			add => _onSessionManagerChanged += value;
			remove => _onSessionManagerChanged -= value;
		}
		[SyncRpc(SyncType.ReliableTarget)]
		public partial void Server_LoadGame(GameMapType mapType);
		public GameplayController()
		{
			_sessionManager = new();
		}
		private BitmaskByte _dirtyReliable_0 = new();
		public override bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _sessionManager.IsDirtyReliable;
				isDirty |= _dirtyReliable_0.AnyTrue();
				return isDirty;
			}
		}
		public override bool IsDirtyUnreliable => false;
		public RoomSessionManager SessionManager => _sessionManager;
		public partial void Client_ReadyToSync()
		{
			Client_ReadyToSyncCallstackCount++;
			_dirtyReliable_0[1] = true;
		}
		private byte Client_ReadyToSyncCallstackCount = 0;
		public partial void Client_OnMapLoaded()
		{
			Client_OnMapLoadedCallstackCount++;
			_dirtyReliable_0[2] = true;
		}
		private byte Client_OnMapLoadedCallstackCount = 0;
		public override void ClearDirtyReliable()
		{
			_dirtyReliable_0.Clear();
			_sessionManager.ClearDirtyReliable();
			Client_ReadyToSyncCallstackCount = 0;
			Client_OnMapLoadedCallstackCount = 0;
		}
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer)
		{
			_dirtyReliable_0[0] = _sessionManager.IsDirtyReliable;
			BitmaskByte dirtyReliable_0 = _dirtyReliable_0;
			int dirtyReliable_0_pos = writer.OffsetSize(sizeof(byte));
			if (_dirtyReliable_0[0])
			{
				_sessionManager.SerializeSyncReliable(writer);
			}
			if (_dirtyReliable_0[1])
			{
				writer.Put((byte)Client_ReadyToSyncCallstackCount);
			}
			if (_dirtyReliable_0[2])
			{
				writer.Put((byte)Client_OnMapLoadedCallstackCount);
			}
			if (dirtyReliable_0.AnyTrue())
			{
				writer.PutTo(dirtyReliable_0, dirtyReliable_0_pos);
			}
			else
			{
				writer.SetSize(dirtyReliable_0_pos);
			}
		}
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void InitializeMasterProperties()
		{
			_sessionManager.InitializeRemoteProperties();
		}
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!_sessionManager.TryDeserializeSyncReliable(reader)) return false;
				_onSessionManagerChanged?.Invoke(_sessionManager);
			}
			if (dirtyReliable_0[1])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadUInt16(out var mapTypeValue)) return false;
					GameMapType mapType = (GameMapType)mapTypeValue;
					Server_LoadGame(mapType);
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!_sessionManager.TryDeserializeEveryProperty(reader)) return false;
			_onSessionManagerChanged?.Invoke(_sessionManager);
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_sessionManager.InitializeRemoteProperties();
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				_sessionManager.IgnoreSyncReliable(reader);
			}
			if (dirtyReliable_0[1])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(2);
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				RoomSessionManager.IgnoreSyncStaticReliable(reader);
			}
			if (dirtyReliable_0[1])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(2);
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
