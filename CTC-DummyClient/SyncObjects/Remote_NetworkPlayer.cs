/*
 * Generated File : Remote_NetworkPlayer
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class NetworkPlayer
	{
		public override NetworkObjectType Type => NetworkObjectType.NetworkPlayer;
		[SyncVar]
		private UserId _userId = new();
		public event Action<UserId>? OnUserIdChanged;
		[SyncVar]
		private NetStringShort _username = new();
		public event Action<NetStringShort>? OnUsernameChanged;
		[SyncVar]
		private int _costume;
		public event Action<int>? OnCostumeChanged;
		public override bool IsDirtyReliable => false;
		public override bool IsDirtyUnreliable => false;
		public override void ClearDirtyReliable() { }
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(PacketWriter writer) { }
		public override void SerializeSyncUnreliable(PacketWriter writer) { }
		public override void SerializeEveryProperty(PacketWriter writer) { }
		public override void DeserializeSyncReliable(PacketReader reader)
		{
			BitmaskByte _dirtyReliable_0 = reader.ReadBitmaskByte();
			if (_dirtyReliable_0[0])
			{
				_userId.Deserialize(reader);
				OnUserIdChanged?.Invoke(_userId);
			}
			if (_dirtyReliable_0[1])
			{
				_username.Deserialize(reader);
				OnUsernameChanged?.Invoke(_username);
			}
			if (_dirtyReliable_0[2])
			{
				_costume = reader.ReadInt32();
				OnCostumeChanged?.Invoke(_costume);
			}
		}
		public override void DeserializeSyncUnreliable(PacketReader reader) { }
		public override void DeserializeEveryProperty(PacketReader reader)
		{
			_userId.Deserialize(reader);
			OnUserIdChanged?.Invoke(_userId);
			_username.Deserialize(reader);
			OnUsernameChanged?.Invoke(_username);
			_costume = reader.ReadInt32();
			OnCostumeChanged?.Invoke(_costume);
		}
		public override void IgnoreSyncReliable(PacketReader reader)
		{
			BitmaskByte _dirtyReliable_0 = reader.ReadBitmaskByte();
			if (_dirtyReliable_0[0])
			{
				UserId.IgnoreStatic(reader);
			}
			if (_dirtyReliable_0[1])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (_dirtyReliable_0[2])
			{
				reader.Ignore(4);
			}
		}
		public static void IgnoreSyncStaticReliable(PacketReader reader)
		{
			BitmaskByte _dirtyReliable_0 = reader.ReadBitmaskByte();
			if (_dirtyReliable_0[0])
			{
				UserId.IgnoreStatic(reader);
			}
			if (_dirtyReliable_0[1])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (_dirtyReliable_0[2])
			{
				reader.Ignore(4);
			}
		}
		public override void IgnoreSyncUnreliable(PacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(PacketReader reader) { }
	}
}
#pragma warning restore CS0649
