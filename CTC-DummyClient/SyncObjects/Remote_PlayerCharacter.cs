/*
 * Generated File : Remote_PlayerCharacter
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using CT.Common.Gameplay;
using CT.Common.Gameplay.Players;
using CT.Common.DataType;
using CT.Common.DataType.Input;
using CT.Common.DataType.Synchronizations;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class PlayerCharacter
	{
		public override NetworkObjectType Type => NetworkObjectType.PlayerCharacter;
		[SyncRpc(dir: SyncDirection.FromRemote, sync: SyncType.Unreliable)]
		public partial void Client_RequestInput(InputData inputData);
		[SyncVar]
		private UserId _userId = new();
		public UserId UserId => _userId;
		private Action<UserId>? _onUserIdChanged;
		public event Action<UserId> OnUserIdChanged
		{
			add => _onUserIdChanged += value;
			remove => _onUserIdChanged -= value;
		}
		[SyncVar]
		private NetStringShort _username = new();
		public NetStringShort Username => _username;
		private Action<NetStringShort>? _onUsernameChanged;
		public event Action<NetStringShort> OnUsernameChanged
		{
			add => _onUsernameChanged += value;
			remove => _onUsernameChanged -= value;
		}
		[SyncVar(SyncType.ColdData)]
		private DokzaAnimationState _animationState;
		public DokzaAnimationState AnimationState => _animationState;
		private Action<DokzaAnimationState>? _onAnimationStateChanged;
		public event Action<DokzaAnimationState> OnAnimationStateChanged
		{
			add => _onAnimationStateChanged += value;
			remove => _onAnimationStateChanged -= value;
		}
		[SyncVar(SyncType.ColdData)]
		private ProxyDirection _proxyDirection;
		public ProxyDirection ProxyDirection => _proxyDirection;
		private Action<ProxyDirection>? _onProxyDirectionChanged;
		public event Action<ProxyDirection> OnProxyDirectionChanged
		{
			add => _onProxyDirectionChanged += value;
			remove => _onProxyDirectionChanged -= value;
		}
		[SyncVar(SyncType.ColdData)]
		private float _animationTime;
		public float AnimationTime => _animationTime;
		private Action<float>? _onAnimationTimeChanged;
		public event Action<float> OnAnimationTimeChanged
		{
			add => _onAnimationTimeChanged += value;
			remove => _onAnimationTimeChanged -= value;
		}
		[SyncRpc]
		public partial void Server_OnAnimationChanged(DokzaAnimationState state);
		[SyncRpc]
		public partial void Server_OnAnimationChanged(DokzaAnimationState state, ProxyDirection direction);
		[SyncRpc]
		public partial void Server_OnProxyDirectionChanged(ProxyDirection direction);
		private BitmaskByte _dirtyUnreliable_0 = new();
		public override bool IsDirtyReliable => false;
		public override bool IsDirtyUnreliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _dirtyUnreliable_0.AnyTrue();
				return isDirty;
			}
		}
		public partial void Client_RequestInput(InputData inputData)
		{
			Client_RequestInputICallstack.Add(inputData);
			_dirtyUnreliable_0[0] = true;
		}
		private List<InputData> Client_RequestInputICallstack = new(4);
		public override void ClearDirtyReliable() { }
		public override void ClearDirtyUnreliable()
		{
			_dirtyUnreliable_0.Clear();
			Client_RequestInputICallstack.Clear();
		}
		public override void SerializeSyncReliable(IPacketWriter writer) { }
		public override void SerializeSyncUnreliable(IPacketWriter writer)
		{
			_dirtyUnreliable_0.Serialize(writer);
			if (_dirtyUnreliable_0[0])
			{
				byte count = (byte)Client_RequestInputICallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = Client_RequestInputICallstack[i];
					arg.Serialize(writer);
				}
			}
		}
		public override void SerializeEveryProperty(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!_userId.TryDeserialize(reader)) return false;
				_onUserIdChanged?.Invoke(_userId);
			}
			if (dirtyReliable_0[1])
			{
				if (!_username.TryDeserialize(reader)) return false;
				_onUsernameChanged?.Invoke(_username);
			}
			if (dirtyReliable_0[2])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadByte(out var stateValue)) return false;
					DokzaAnimationState state = (DokzaAnimationState)stateValue;
					Server_OnAnimationChanged(state);
				}
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadByte(out var stateValue)) return false;
					DokzaAnimationState state = (DokzaAnimationState)stateValue;
					if (!reader.TryReadByte(out var directionValue)) return false;
					ProxyDirection direction = (ProxyDirection)directionValue;
					Server_OnAnimationChanged(state, direction);
				}
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadByte(out var directionValue)) return false;
					ProxyDirection direction = (ProxyDirection)directionValue;
					Server_OnProxyDirectionChanged(direction);
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!_userId.TryDeserialize(reader)) return false;
			_onUserIdChanged?.Invoke(_userId);
			if (!_username.TryDeserialize(reader)) return false;
			_onUsernameChanged?.Invoke(_username);
			if (!reader.TryReadByte(out var _animationStateValue)) return false;
			_animationState = (DokzaAnimationState)_animationStateValue;
			_onAnimationStateChanged?.Invoke(_animationState);
			if (!reader.TryReadByte(out var _proxyDirectionValue)) return false;
			_proxyDirection = (ProxyDirection)_proxyDirectionValue;
			_onProxyDirectionChanged?.Invoke(_proxyDirection);
			if (!reader.TryReadSingle(out _animationTime)) return false;
			_onAnimationTimeChanged?.Invoke(_animationTime);
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_userId = new();
			_username = new();
			_animationState = (DokzaAnimationState)0;
			_proxyDirection = (ProxyDirection)0;
			_animationTime = 0;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				UserId.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[2])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
				}
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
					reader.Ignore(1);
				}
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				UserId.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[2])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
				}
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
					reader.Ignore(1);
				}
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
