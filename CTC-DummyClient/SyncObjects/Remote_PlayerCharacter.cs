/*
 * Generated File : Remote_PlayerCharacter
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTC.Networks.Synchronizations;
#if UNITY_2021
using UnityEngine;
#endif

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class PlayerCharacter
	{
		public override NetworkObjectType Type => NetworkObjectType.PlayerCharacter;
		[SyncRpc(dir: SyncDirection.FromRemote, sync: SyncType.Unreliable)]
		public partial void Client_InputMovement(Vector2 direction);
		[SyncVar]
		public UserId UserId = new();
		public event Action<UserId>? OnUserIdChanged;
		[SyncVar]
		public NetStringShort Username = new();
		public event Action<NetStringShort>? OnUsernameChanged;
		[SyncVar]
		public int Costume;
		public event Action<int>? OnCostumeChanged;
		[SyncVar]
		public Vector2 Test = new();
		public event Action<Vector2>? OnTestChanged;
		private BitmaskByte _dirtyUnreliable_0 = new();
		public override bool IsDirtyReliable => false;
		public override bool IsDirtyUnreliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _dirtyUnreliable_0.AnyTrue();
				return isDirty;
			}
		}
		public partial void Client_InputMovement(Vector2 direction)
		{
			Client_InputMovementCallstack.Add(direction);
			_dirtyUnreliable_0[0] = true;
		}
		private List<Vector2> Client_InputMovementCallstack = new(4);
		public override void ClearDirtyReliable() { }
		public override void ClearDirtyUnreliable()
		{
			_dirtyUnreliable_0.Clear();
			Client_InputMovementCallstack.Clear();
		}
		public override void SerializeSyncReliable(IPacketWriter writer) { }
		public override void SerializeSyncUnreliable(IPacketWriter writer)
		{
			_dirtyUnreliable_0.Serialize(writer);
			if (_dirtyUnreliable_0[0])
			{
				byte count = (byte)Client_InputMovementCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = Client_InputMovementCallstack[i];
					arg.Serialize(writer);
				}
			}
		}
		public override void SerializeEveryProperty(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!UserId.TryDeserialize(reader)) return false;
				OnUserIdChanged?.Invoke(UserId);
			}
			if (dirtyReliable_0[1])
			{
				if (!Username.TryDeserialize(reader)) return false;
				OnUsernameChanged?.Invoke(Username);
			}
			if (dirtyReliable_0[2])
			{
				if (!reader.TryReadInt32(out Costume)) return false;
				OnCostumeChanged?.Invoke(Costume);
			}
			if (dirtyReliable_0[3])
			{
				if (!reader.TryReadVector2(out Test)) return false;
				OnTestChanged?.Invoke(Test);
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!UserId.TryDeserialize(reader)) return false;
			OnUserIdChanged?.Invoke(UserId);
			if (!Username.TryDeserialize(reader)) return false;
			OnUsernameChanged?.Invoke(Username);
			if (!reader.TryReadInt32(out Costume)) return false;
			OnCostumeChanged?.Invoke(Costume);
			if (!reader.TryReadVector2(out Test)) return false;
			OnTestChanged?.Invoke(Test);
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			UserId = new();
			Username = new();
			Costume = 0;
			Test = new();
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				UserId.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[3])
			{
				Vector2Extension.IgnoreStatic(reader);
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				UserId.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[3])
			{
				Vector2Extension.IgnoreStatic(reader);
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
