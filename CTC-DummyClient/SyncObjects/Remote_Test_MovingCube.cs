/*
 * Generated File : Remote_Test_MovingCube.cs
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Serialization.Type;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class Test_MovingCube : RemoteNetworkObject
	{
		public override NetworkObjectType Type => NetworkObjectType.Test_MovingCube;
		/// DECLARE MASTER SIDE SYNC ELEMETS ///
		[SyncVar]
		private NetworkIdentity _networkIdentity = new();
		public event Action<NetworkIdentity>? OnNetworkIdentityChanged;
		[SyncVar]
		private byte _r;
		public event Action<byte>? OnRChanged;
		[SyncVar]
		private byte _g;
		public event Action<byte>? OnGChanged;
		[SyncVar]
		private byte _b;
		public event Action<byte>? OnBChanged;
		[SyncVar]
		private float _speed;
		public event Action<float>? OnSpeedChanged;
		[SyncVar]
		private float _x;
		public event Action<float>? OnXChanged;
		[SyncVar]
		private float _y;
		public event Action<float>? OnYChanged;
		[SyncVar]
		private float _z;
		public event Action<float>? OnZChanged;
		[SyncVar]
		private float _dest;
		public event Action<float>? OnDestChanged;
		[SyncRpc]
		public partial void Server_MoveTo(float _y);
#region SYNCHRONIZATIONS
		public override bool IsDirtyReliable => false;
		public override bool IsDirtyUnreliable => false;
		public override void SerializeSyncReliable(PacketWriter writer) { }
		public override void SerializeSyncUnreliable(PacketWriter writer) { }
		public override void SerializeEveryProperty(PacketWriter writer) { }
		public override void DeserializeSyncReliable(PacketReader reader)
		{
			BitmaskByte objectDirty = reader.ReadBitmaskByte();
			if (objectDirty[0])
			{
				BitmaskByte _propertyDirty_0 = reader.ReadBitmaskByte();
				if (_propertyDirty_0[0])
				{
					_networkIdentity.Deserialize(reader);
					OnNetworkIdentityChanged?.Invoke(_networkIdentity);
				}
				if (_propertyDirty_0[1])
				{
					_r = reader.ReadByte();
					OnRChanged?.Invoke(_r);
				}
				if (_propertyDirty_0[2])
				{
					_g = reader.ReadByte();
					OnGChanged?.Invoke(_g);
				}
				if (_propertyDirty_0[3])
				{
					_b = reader.ReadByte();
					OnBChanged?.Invoke(_b);
				}
				if (_propertyDirty_0[4])
				{
					_speed = reader.ReadSingle();
					OnSpeedChanged?.Invoke(_speed);
				}
				if (_propertyDirty_0[5])
				{
					_x = reader.ReadSingle();
					OnXChanged?.Invoke(_x);
				}
				if (_propertyDirty_0[6])
				{
					_y = reader.ReadSingle();
					OnYChanged?.Invoke(_y);
				}
				if (_propertyDirty_0[7])
				{
					_z = reader.ReadSingle();
					OnZChanged?.Invoke(_z);
				}
			}
			if (objectDirty[1])
			{
				BitmaskByte _propertyDirty_1 = reader.ReadBitmaskByte();
				if (_propertyDirty_1[0])
				{
					_dest = reader.ReadSingle();
					OnDestChanged?.Invoke(_dest);
				}
			}
			if (objectDirty[4])
			{
				BitmaskByte _rpcDirty_0 = reader.ReadBitmaskByte();
				if (_rpcDirty_0[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						float _y = reader.ReadSingle();
						Server_MoveTo(_y);
					}
				}
			}
		}
		public override void DeserializeSyncUnreliable(PacketReader reader) { }
		public override void DeserializeEveryProperty(PacketReader reader)
		{
			_networkIdentity.Deserialize(reader);
			_r = reader.ReadByte();
			_g = reader.ReadByte();
			_b = reader.ReadByte();
			_speed = reader.ReadSingle();
			_x = reader.ReadSingle();
			_y = reader.ReadSingle();
			_z = reader.ReadSingle();
			_dest = reader.ReadSingle();
		}
		public override void ClearDirtyReliable() {}
		public override void ClearDirtyUnreliable() {}
#endregion
	}
}
#pragma warning restore CS0649
