/*
 * Generated File : Remote_TestInnerObject.cs
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Serialization.Type;
using CT.Common.Synchronizations;
using CT.Tools.Collections;
using CTC.Networks.Synchornizations;

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class Remote_TestInnerObject : IRemoteSynchronizable
	{
		[SyncVar]
		private UserId _userId = new();
		public event Action<UserId>? OnUserIdChanged;
		
		[SyncVar]
		private NetStringShort _name = string.Empty;
		public event Action<NetStringShort>? OnNameChanged;
		
		[SyncRpc]
		public partial void Server_Rename(NetStringShort newName);
		
		
		
	
	#region Synchronization
	
		public void DeserializeSyncReliable(PacketReader reader)
		{
			BitmaskByte objectDirty = reader.ReadBitmaskByte();
		
			
			if (objectDirty[0])
			{
				BitmaskByte _propertyDirty_0 = reader.ReadBitmaskByte();
			
				if (_propertyDirty_0[0])
				{
					_userId.Deserialize(reader);
					OnUserIdChanged?.Invoke(_userId);
				}
				if (_propertyDirty_0[1])
				{
					_name.Deserialize(reader);
					OnNameChanged?.Invoke(_name);
				}
				
			}
			
			if (objectDirty[4])
			{
				BitmaskByte _rpcDirty_0 = reader.ReadBitmaskByte();
			
				if (_rpcDirty_0[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetStringShort newName = new();
						newName.Deserialize(reader);
						
						Server_Rename(newName);
					}
				}
				
			}
			
		}
		
		public void DeserializeSyncUnreliable(PacketReader reader) { }
		
	
		public void DeserializeEveryProperty(PacketReader reader)
		{
			_userId.Deserialize(reader);
			_name.Deserialize(reader);
			
		}
		
		
	
	#endregion
	}
	
}