/*
 * Generated File : Remote_TestFuntionObject
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Serialization.Type;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class TestFuntionObject : ISynchronizable
	{
		[SyncRpc]
		public partial void Server_VoidArg();
		[SyncRpc]
		public partial void Server_PrimitiveArg_1(float v0);
		[SyncRpc]
		public partial void Server_PrimitiveArg_2(float v0, int v1);
		[SyncRpc]
		public partial void Server_PrimitiveArg_3(float v0, int v1, double v2);
		[SyncRpc]
		public partial void Server_ValueTypeArg_1(NetVec2 v0);
		[SyncRpc]
		public partial void Server_ValueTypeArg_2(NetVec2 v0, NetString v1);
		[SyncRpc]
		public partial void Server_ValueTypeArg_3(UserId v0, NetVec2 v1, NetString v2);
		[SyncRpc]
		public partial void Server_EnumTypeArg_1(DisconnectReasonType v0, AckJoinMatch v1);
		[SyncRpc]
		public partial void Server_EnumTypeArg_2(AckJoinMatch v0, DisconnectReasonType v1);
		[SyncRpc]
		public partial void Server_EnumTypeArg_3(AckJoinMatch v0, DisconnectReasonType v1, AckJoinMatch v2);
		[SyncRpc]
		public partial void Server_CompositeArg_2_1(int v0, DisconnectReasonType v1);
		[SyncRpc]
		public partial void Server_CompositeArg_2_2(NetVec2 v0, DisconnectReasonType v1);
		[SyncRpc]
		public partial void Server_CompositeArg_3(NetVec2 v0, DisconnectReasonType v1, float v2);
		public bool IsDirtyReliable => false;
		public bool IsDirtyUnreliable => false;
		public void ClearDirtyReliable() { }
		public void ClearDirtyUnreliable() { }
		public void SerializeSyncReliable(PacketWriter writer) { }
		public void SerializeSyncUnreliable(PacketWriter writer) { }
		public void SerializeEveryProperty(PacketWriter writer) { }
		public void DeserializeSyncReliable(PacketReader reader)
		{
			BitmaskByte _dirtyReliable_0 = reader.ReadBitmaskByte();
			if (_dirtyReliable_0.AnyTrue())
			{
				if (_dirtyReliable_0[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						Server_VoidArg();
					}
				}
				if (_dirtyReliable_0[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						float v0 = reader.ReadSingle();
						Server_PrimitiveArg_1(v0);
					}
				}
				if (_dirtyReliable_0[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						float v0 = reader.ReadSingle();
						int v1 = reader.ReadInt32();
						Server_PrimitiveArg_2(v0, v1);
					}
				}
				if (_dirtyReliable_0[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						float v0 = reader.ReadSingle();
						int v1 = reader.ReadInt32();
						double v2 = reader.ReadDouble();
						Server_PrimitiveArg_3(v0, v1, v2);
					}
				}
				if (_dirtyReliable_0[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2 v0 = new();
						v0.Deserialize(reader);
						Server_ValueTypeArg_1(v0);
					}
				}
				if (_dirtyReliable_0[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2 v0 = new();
						v0.Deserialize(reader);
						NetString v1 = new();
						v1.Deserialize(reader);
						Server_ValueTypeArg_2(v0, v1);
					}
				}
				if (_dirtyReliable_0[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						UserId v0 = new();
						v0.Deserialize(reader);
						NetVec2 v1 = new();
						v1.Deserialize(reader);
						NetString v2 = new();
						v2.Deserialize(reader);
						Server_ValueTypeArg_3(v0, v1, v2);
					}
				}
				if (_dirtyReliable_0[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						DisconnectReasonType v0 = (DisconnectReasonType)reader.ReadByte();
						AckJoinMatch v1 = (AckJoinMatch)reader.ReadByte();
						Server_EnumTypeArg_1(v0, v1);
					}
				}
			}
			BitmaskByte _dirtyReliable_1 = reader.ReadBitmaskByte();
			if (_dirtyReliable_1.AnyTrue())
			{
				if (_dirtyReliable_1[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						AckJoinMatch v0 = (AckJoinMatch)reader.ReadByte();
						DisconnectReasonType v1 = (DisconnectReasonType)reader.ReadByte();
						Server_EnumTypeArg_2(v0, v1);
					}
				}
				if (_dirtyReliable_1[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						AckJoinMatch v0 = (AckJoinMatch)reader.ReadByte();
						DisconnectReasonType v1 = (DisconnectReasonType)reader.ReadByte();
						AckJoinMatch v2 = (AckJoinMatch)reader.ReadByte();
						Server_EnumTypeArg_3(v0, v1, v2);
					}
				}
				if (_dirtyReliable_1[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						int v0 = reader.ReadInt32();
						DisconnectReasonType v1 = (DisconnectReasonType)reader.ReadByte();
						Server_CompositeArg_2_1(v0, v1);
					}
				}
				if (_dirtyReliable_1[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2 v0 = new();
						v0.Deserialize(reader);
						DisconnectReasonType v1 = (DisconnectReasonType)reader.ReadByte();
						Server_CompositeArg_2_2(v0, v1);
					}
				}
				if (_dirtyReliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2 v0 = new();
						v0.Deserialize(reader);
						DisconnectReasonType v1 = (DisconnectReasonType)reader.ReadByte();
						float v2 = reader.ReadSingle();
						Server_CompositeArg_3(v0, v1, v2);
					}
				}
			}
		}
		public void DeserializeSyncUnreliable(PacketReader reader) { }
		public void IgnoreSyncReliable(PacketReader reader)
		{
			BitmaskByte _dirtyReliable_0 = reader.ReadBitmaskByte();
			if (_dirtyReliable_0.AnyTrue())
			{
				if (_dirtyReliable_0[0])
				{
					reader.Ignore(1);
				}
				if (_dirtyReliable_0[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (_dirtyReliable_0[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
				if (_dirtyReliable_0[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
						reader.Ignore(8);
					}
				}
				if (_dirtyReliable_0[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.Ignore(reader);
					}
				}
				if (_dirtyReliable_0[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.Ignore(reader);
						NetString.Ignore(reader);
					}
				}
				if (_dirtyReliable_0[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						UserId.Ignore(reader);
						NetVec2.Ignore(reader);
						NetString.Ignore(reader);
					}
				}
				if (_dirtyReliable_0[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(1);
					}
				}
			}
			BitmaskByte _dirtyReliable_1 = reader.ReadBitmaskByte();
			if (_dirtyReliable_1.AnyTrue())
			{
				if (_dirtyReliable_1[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(1);
					}
				}
				if (_dirtyReliable_1[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(1);
						reader.Ignore(1);
					}
				}
				if (_dirtyReliable_1[2])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(1);
					}
				}
				if (_dirtyReliable_1[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.Ignore(reader);
						reader.Ignore(1);
					}
				}
				if (_dirtyReliable_1[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetVec2.Ignore(reader);
						reader.Ignore(1);
						reader.Ignore(4);
					}
				}
			}
		}
		public void IgnoreSyncUnreliable(PacketReader reader) { }
		public void DeserializeEveryProperty(PacketReader reader) { }
	}
}
#pragma warning restore CS0649
