/*
 * Generated File : Remote_TestNetworkObject.cs
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Serialization.Type;
using CT.Common.Synchronizations;
using CT.Tools.Collections;
using CTC.Networks.Synchornizations;

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class Remote_TestNetworkObject : RemoteNetworkObject
	{
		public override NetworkObjectType Type => NetworkObjectType.TestNetworkObject;
	
		[SyncVar]
		private UserToken _userToken = new();
		public event Action<UserToken>? OnUserTokenChanged;
		
		[SyncVar]
		private float _floatValue;
		public event Action<float>? OnFloatValueChanged;
		
		[SyncObject]
		private Remote_TestSyncObject _testSyncObject = new();
		public event Action<Remote_TestSyncObject>? OnTestSyncObjectChanged;
		
		[SyncRpc]
		public partial void Server_DoSomethiing();
		
		[SyncRpc]
		public partial void Server_Response(NetString message);
		
		
		[SyncObject(SyncType.Unreliable)]
		private Remote_TestSyncObject _testUnreliableObject = new();
		public event Action<Remote_TestSyncObject>? OnTestUnreliableObjectChanged;
		
		[SyncRpc(SyncType.Unreliable)]
		public partial void Server_SendMessage(NetString message);
		
		
	
	#region Synchronization
	
		public override void DeserializeSyncReliable(PacketReader reader)
		{
			BitmaskByte objectDirty = reader.ReadBitmaskByte();
		
			
			if (objectDirty[0])
			{
				BitmaskByte _propertyDirty_0 = reader.ReadBitmaskByte();
			
				if (_propertyDirty_0[0])
				{
					_userToken.Deserialize(reader);
					OnUserTokenChanged?.Invoke(_userToken);
				}
				if (_propertyDirty_0[1])
				{
					_floatValue = reader.ReadSingle();
					OnFloatValueChanged?.Invoke(_floatValue);
				}
				if (_propertyDirty_0[2])
				{
					_testSyncObject.DeserializeSyncReliable(reader);
					OnTestSyncObjectChanged?.Invoke(_testSyncObject);
				}
				
			}
			
			if (objectDirty[4])
			{
				BitmaskByte _rpcDirty_0 = reader.ReadBitmaskByte();
			
				if (_rpcDirty_0[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						Server_DoSomethiing();
					}
				}
				if (_rpcDirty_0[1])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetString message = new();
						message.Deserialize(reader);
						
						Server_Response(message);
					}
				}
				
			}
			
		}
		
		public override void DeserializeSyncUnreliable(PacketReader reader)
		{
			BitmaskByte objectDirty = reader.ReadBitmaskByte();
		
			
			if (objectDirty[0])
			{
				BitmaskByte _unreliablePropertyDirty_0 = reader.ReadBitmaskByte();
			
				if (_unreliablePropertyDirty_0[0])
				{
					_testUnreliableObject.DeserializeSyncUnreliable(reader);
					OnTestUnreliableObjectChanged?.Invoke(_testUnreliableObject);
				}
				
			}
			
			if (objectDirty[4])
			{
				BitmaskByte _unreliableRpcDirty_0 = reader.ReadBitmaskByte();
			
				if (_unreliableRpcDirty_0[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetString message = new();
						message.Deserialize(reader);
						
						Server_SendMessage(message);
					}
				}
				
			}
			
		}
		
	
		public override void DeserializeEveryProperty(PacketReader reader)
		{
			_userToken.Deserialize(reader);
			_floatValue = reader.ReadSingle();
			_testSyncObject.DeserializeEveryProperty(reader);
			_testUnreliableObject.DeserializeEveryProperty(reader);
			
		}
		
		
	
	#endregion
	}
	
}