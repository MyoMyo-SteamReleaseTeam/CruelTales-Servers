/*
 * Generated File : Remote_TestNetworkObject.cs
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

using System;
using System.Collections.Generic;
using CT.Common.DataType;
using CT.Common.Serialization;
using CT.Common.Serialization.Type;
using CT.Common.Synchronizations;
using CT.Common.Tools.Collections;
using CTC.Networks.Synchornizations;

namespace CTC.Networks.SyncObjects.TestSyncObjects
{
	[Serializable]
	public partial class TestNetworkObject : RemoteNetworkObject
	{
		public override NetworkObjectType Type => NetworkObjectType.TestNetworkObject;
#region FromRemote
		[SyncVar(dir: SyncDirection.FromRemote)]
		private NetTransform _remote_netTransform = new();
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_DoSomethiing();
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_SendMessage(NetString message);
		[SyncVar(dir: SyncDirection.FromRemote, sync: SyncType.Unreliable)]
		private int _remote_Value;
#endregion
#region FromRemote
		[SyncVar]
		private UserToken _userToken = new();
		public event Action<UserToken>? OnUserTokenChanged;
		[SyncRpc]
		public partial void Server_DoSomethiing();
		[SyncVar(SyncType.Unreliable)]
		private float _floatValue;
		public event Action<float>? OnFloatValueChanged;
		[SyncRpc(SyncType.Unreliable)]
		public partial void Server_SendMessage(NetString message);
#endregion
		private BitmaskByte _propertyDirty_0 = new();
		private BitmaskByte _rpcDirty_0 = new();
		public override bool IsDirtyReliable
		{
			get
			{
				bool isDirty = false;
				isDirty |= _propertyDirty_0.AnyTrue();
				isDirty |= _rpcDirty_0.AnyTrue();
				return isDirty;
			}
		}
		private NetTransform Remote_netTransform
		{
			get => _remote_netTransform;
			set
			{
				if (_remote_netTransform == value) return;
				_remote_netTransform = value;
				_propertyDirty_0[0] = true;
			}
		}
		public partial void Client_DoSomethiing()
		{
			Client_DoSomethiingCallstackCount++;
			_rpcDirty_0[0] = true;
		}
		private byte Client_DoSomethiingCallstackCount = 0;
		public partial void Client_SendMessage(NetString message)
		{
			Client_SendMessageCallstack.Enqueue(message);
			_rpcDirty_0[1] = true;
		}
		private Queue<NetString> Client_SendMessageCallstack = new();
		public override bool IsDirtyUnreliable => false;
#region FromRemote
		public override void SerializeSyncReliable(PacketWriter writer)
		{
			BitmaskByte objectDirty = new BitmaskByte();
			objectDirty[0] = _propertyDirty_0.AnyTrue();
			objectDirty[4] = _rpcDirty_0.AnyTrue();
			objectDirty.Serialize(writer);
			if (objectDirty[0])
			{
				_propertyDirty_0.Serialize(writer);
				if (_propertyDirty_0[0]) _remote_netTransform.Serialize(writer);
			}
			if (objectDirty[4])
			{
				_rpcDirty_0.Serialize(writer);
				if (_rpcDirty_0[0])
				{
					writer.Put(Client_DoSomethiingCallstackCount);
					Client_DoSomethiingCallstackCount = 0;
				}
				if (_rpcDirty_0[1])
				{
					byte count = (byte)Client_SendMessageCallstack.Count;
					writer.Put(count);
					for (int i = 0; i < count; i++)
					{
						var arg = Client_SendMessageCallstack.Dequeue();
						arg.Serialize(writer);
					}
				}
			}
		}
		public override void SerializeSyncUnreliable(PacketWriter writer) { }
		public override void SerializeEveryProperty(PacketWriter writer)
		{
			_remote_netTransform.Serialize(writer);
			writer.Put(_remote_Value);
		}
#endregion
#region FromRemote
		public override void DeserializeSyncReliable(PacketReader reader)
		{
			BitmaskByte objectDirty = reader.ReadBitmaskByte();
			if (objectDirty[0])
			{
				BitmaskByte _propertyDirty_0 = reader.ReadBitmaskByte();
				if (_propertyDirty_0[0])
				{
					_userToken.Deserialize(reader);
					OnUserTokenChanged?.Invoke(_userToken);
				}
			}
			if (objectDirty[4])
			{
				BitmaskByte _rpcDirty_0 = reader.ReadBitmaskByte();
				if (_rpcDirty_0[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						Server_DoSomethiing();
					}
				}
			}
		}
		public override void DeserializeSyncUnreliable(PacketReader reader)
		{
			BitmaskByte objectDirty = reader.ReadBitmaskByte();
			if (objectDirty[0])
			{
				BitmaskByte _unreliablePropertyDirty_0 = reader.ReadBitmaskByte();
				if (_unreliablePropertyDirty_0[0])
				{
					_floatValue = reader.ReadSingle();
					OnFloatValueChanged?.Invoke(_floatValue);
				}
			}
			if (objectDirty[4])
			{
				BitmaskByte _unreliableRpcDirty_0 = reader.ReadBitmaskByte();
				if (_unreliableRpcDirty_0[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						NetString message = new();
						message.Deserialize(reader);
						Server_SendMessage(message);
					}
				}
			}
		}
		public override void DeserializeEveryProperty(PacketReader reader)
		{
			_userToken.Deserialize(reader);
			_floatValue = reader.ReadSingle();
		}
#endregion
		public override void ClearDirtyReliable()
		{
			_propertyDirty_0.Clear();
			_rpcDirty_0.Clear();
		}
		public override void ClearDirtyUnreliable() {}
	}
}
