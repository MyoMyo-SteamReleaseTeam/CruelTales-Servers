/*
 * Generated File : Packet_Connection.cs
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

using CT.Common.DataType;
using CT.Common.Serialization;

namespace CT.Packets
{
	public partial struct UserProfile : IPacketSerializable
	{
		public NetStringShort Username;
		public NetStringShort Clothes;
	
		public int SerializeSize => Username.SerializeSize + Clothes.SerializeSize;
	
		public void Serialize(IPacketWriter writer)
		{
			Username.Serialize(writer);
			Clothes.Serialize(writer);
		}
	
		public bool TryDeserialize(IPacketReader reader)
		{
			if (!Username.TryDeserialize(reader)) return false;
			if (!Clothes.TryDeserialize(reader)) return false;
			return true;
		}
	
		public static void IgnoreStatic(IPacketReader reader) => throw new System.NotImplementedException();
		public void Ignore(IPacketReader reader) => throw new System.NotImplementedException();
	}
	
	public sealed partial class CS_Req_TryEnterGameInstance : PacketBase
	{
		public override PacketType PacketType => PacketType.CS_Req_TryEnterGameInstance;
	
		public GameInstanceGuid MatchTo = new();
		public UserDataInfo UserDataInfo = new();
		public UserToken Token = new();
		public int Password;
	
		public override int SerializeSize => MatchTo.SerializeSize + UserDataInfo.SerializeSize + Token.SerializeSize + 6;
	
		public override void Serialize(IPacketWriter writer)
		{
			writer.Put(PacketType);
			MatchTo.Serialize(writer);
			UserDataInfo.Serialize(writer);
			Token.Serialize(writer);
			writer.Put(Password);
		}
	
		public override bool TryDeserialize(IPacketReader reader)
		{
			if (!MatchTo.TryDeserialize(reader)) return false;
			if (!UserDataInfo.TryDeserialize(reader)) return false;
			if (!Token.TryDeserialize(reader)) return false;
			if (!reader.TryReadInt32(out Password)) return false;
			return true;
		}
	}
	
	public sealed partial class SC_Ack_TryEnterGameInstance : PacketBase
	{
		public override PacketType PacketType => PacketType.SC_Ack_TryEnterGameInstance;
	
		public AckJoinMatch AckResult;
	
		public override int SerializeSize =>  + 3;
	
		public override void Serialize(IPacketWriter writer)
		{
			writer.Put(PacketType);
			writer.Put(AckResult);
		}
	
		public override bool TryDeserialize(IPacketReader reader)
		{
			if (!reader.TryReadAckJoinMatch(out AckResult)) return false;
			return true;
		}
	}
	
	public sealed partial class CS_Req_ReadyToSync : PacketBase
	{
		public override PacketType PacketType => PacketType.CS_Req_ReadyToSync;
	
	
	
		public override int SerializeSize =>  + 2;
	
		public override void Serialize(IPacketWriter writer)
		{
			writer.Put(PacketType);
			
		}
	
		public override bool TryDeserialize(IPacketReader reader)
		{
			
			return true;
		}
	}
}